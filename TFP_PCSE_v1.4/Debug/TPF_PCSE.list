
TPF_PCSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005464  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b0  080056b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b8  080056b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000890  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000900  20000900  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ac0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002315  00000000  00000000  00032b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00034e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da0  00000000  00000000  00035ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025058  00000000  00000000  00036a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011be1  00000000  00000000  0005bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddb17  00000000  00000000  0006d6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b1d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004208  00000000  00000000  0014b228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080055fc 	.word	0x080055fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080055fc 	.word	0x080055fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295
 80006cc:	f000 b974 	b.w	80009b8 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9d08      	ldr	r5, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	468e      	mov	lr, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14d      	bne.n	8000792 <__udivmoddi4+0xaa>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4694      	mov	ip, r2
 80006fa:	d969      	bls.n	80007d0 <__udivmoddi4+0xe8>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b152      	cbz	r2, 8000718 <__udivmoddi4+0x30>
 8000702:	fa01 f302 	lsl.w	r3, r1, r2
 8000706:	f1c2 0120 	rsb	r1, r2, #32
 800070a:	fa20 f101 	lsr.w	r1, r0, r1
 800070e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000712:	ea41 0e03 	orr.w	lr, r1, r3
 8000716:	4094      	lsls	r4, r2
 8000718:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800071c:	0c21      	lsrs	r1, r4, #16
 800071e:	fbbe f6f8 	udiv	r6, lr, r8
 8000722:	fa1f f78c 	uxth.w	r7, ip
 8000726:	fb08 e316 	mls	r3, r8, r6, lr
 800072a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800072e:	fb06 f107 	mul.w	r1, r6, r7
 8000732:	4299      	cmp	r1, r3
 8000734:	d90a      	bls.n	800074c <__udivmoddi4+0x64>
 8000736:	eb1c 0303 	adds.w	r3, ip, r3
 800073a:	f106 30ff 	add.w	r0, r6, #4294967295
 800073e:	f080 811f 	bcs.w	8000980 <__udivmoddi4+0x298>
 8000742:	4299      	cmp	r1, r3
 8000744:	f240 811c 	bls.w	8000980 <__udivmoddi4+0x298>
 8000748:	3e02      	subs	r6, #2
 800074a:	4463      	add	r3, ip
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb3 f0f8 	udiv	r0, r3, r8
 8000754:	fb08 3310 	mls	r3, r8, r0, r3
 8000758:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800075c:	fb00 f707 	mul.w	r7, r0, r7
 8000760:	42a7      	cmp	r7, r4
 8000762:	d90a      	bls.n	800077a <__udivmoddi4+0x92>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 33ff 	add.w	r3, r0, #4294967295
 800076c:	f080 810a 	bcs.w	8000984 <__udivmoddi4+0x29c>
 8000770:	42a7      	cmp	r7, r4
 8000772:	f240 8107 	bls.w	8000984 <__udivmoddi4+0x29c>
 8000776:	4464      	add	r4, ip
 8000778:	3802      	subs	r0, #2
 800077a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800077e:	1be4      	subs	r4, r4, r7
 8000780:	2600      	movs	r6, #0
 8000782:	b11d      	cbz	r5, 800078c <__udivmoddi4+0xa4>
 8000784:	40d4      	lsrs	r4, r2
 8000786:	2300      	movs	r3, #0
 8000788:	e9c5 4300 	strd	r4, r3, [r5]
 800078c:	4631      	mov	r1, r6
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	428b      	cmp	r3, r1
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0xc2>
 8000796:	2d00      	cmp	r5, #0
 8000798:	f000 80ef 	beq.w	800097a <__udivmoddi4+0x292>
 800079c:	2600      	movs	r6, #0
 800079e:	e9c5 0100 	strd	r0, r1, [r5]
 80007a2:	4630      	mov	r0, r6
 80007a4:	4631      	mov	r1, r6
 80007a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007aa:	fab3 f683 	clz	r6, r3
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d14a      	bne.n	8000848 <__udivmoddi4+0x160>
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d302      	bcc.n	80007bc <__udivmoddi4+0xd4>
 80007b6:	4282      	cmp	r2, r0
 80007b8:	f200 80f9 	bhi.w	80009ae <__udivmoddi4+0x2c6>
 80007bc:	1a84      	subs	r4, r0, r2
 80007be:	eb61 0303 	sbc.w	r3, r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	469e      	mov	lr, r3
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d0e0      	beq.n	800078c <__udivmoddi4+0xa4>
 80007ca:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ce:	e7dd      	b.n	800078c <__udivmoddi4+0xa4>
 80007d0:	b902      	cbnz	r2, 80007d4 <__udivmoddi4+0xec>
 80007d2:	deff      	udf	#255	; 0xff
 80007d4:	fab2 f282 	clz	r2, r2
 80007d8:	2a00      	cmp	r2, #0
 80007da:	f040 8092 	bne.w	8000902 <__udivmoddi4+0x21a>
 80007de:	eba1 010c 	sub.w	r1, r1, ip
 80007e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007e6:	fa1f fe8c 	uxth.w	lr, ip
 80007ea:	2601      	movs	r6, #1
 80007ec:	0c20      	lsrs	r0, r4, #16
 80007ee:	fbb1 f3f7 	udiv	r3, r1, r7
 80007f2:	fb07 1113 	mls	r1, r7, r3, r1
 80007f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fa:	fb0e f003 	mul.w	r0, lr, r3
 80007fe:	4288      	cmp	r0, r1
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x12c>
 8000802:	eb1c 0101 	adds.w	r1, ip, r1
 8000806:	f103 38ff 	add.w	r8, r3, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x12a>
 800080c:	4288      	cmp	r0, r1
 800080e:	f200 80cb 	bhi.w	80009a8 <__udivmoddi4+0x2c0>
 8000812:	4643      	mov	r3, r8
 8000814:	1a09      	subs	r1, r1, r0
 8000816:	b2a4      	uxth	r4, r4
 8000818:	fbb1 f0f7 	udiv	r0, r1, r7
 800081c:	fb07 1110 	mls	r1, r7, r0, r1
 8000820:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000824:	fb0e fe00 	mul.w	lr, lr, r0
 8000828:	45a6      	cmp	lr, r4
 800082a:	d908      	bls.n	800083e <__udivmoddi4+0x156>
 800082c:	eb1c 0404 	adds.w	r4, ip, r4
 8000830:	f100 31ff 	add.w	r1, r0, #4294967295
 8000834:	d202      	bcs.n	800083c <__udivmoddi4+0x154>
 8000836:	45a6      	cmp	lr, r4
 8000838:	f200 80bb 	bhi.w	80009b2 <__udivmoddi4+0x2ca>
 800083c:	4608      	mov	r0, r1
 800083e:	eba4 040e 	sub.w	r4, r4, lr
 8000842:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000846:	e79c      	b.n	8000782 <__udivmoddi4+0x9a>
 8000848:	f1c6 0720 	rsb	r7, r6, #32
 800084c:	40b3      	lsls	r3, r6
 800084e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000852:	ea4c 0c03 	orr.w	ip, ip, r3
 8000856:	fa20 f407 	lsr.w	r4, r0, r7
 800085a:	fa01 f306 	lsl.w	r3, r1, r6
 800085e:	431c      	orrs	r4, r3
 8000860:	40f9      	lsrs	r1, r7
 8000862:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000866:	fa00 f306 	lsl.w	r3, r0, r6
 800086a:	fbb1 f8f9 	udiv	r8, r1, r9
 800086e:	0c20      	lsrs	r0, r4, #16
 8000870:	fa1f fe8c 	uxth.w	lr, ip
 8000874:	fb09 1118 	mls	r1, r9, r8, r1
 8000878:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800087c:	fb08 f00e 	mul.w	r0, r8, lr
 8000880:	4288      	cmp	r0, r1
 8000882:	fa02 f206 	lsl.w	r2, r2, r6
 8000886:	d90b      	bls.n	80008a0 <__udivmoddi4+0x1b8>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000890:	f080 8088 	bcs.w	80009a4 <__udivmoddi4+0x2bc>
 8000894:	4288      	cmp	r0, r1
 8000896:	f240 8085 	bls.w	80009a4 <__udivmoddi4+0x2bc>
 800089a:	f1a8 0802 	sub.w	r8, r8, #2
 800089e:	4461      	add	r1, ip
 80008a0:	1a09      	subs	r1, r1, r0
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008a8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008b4:	458e      	cmp	lr, r1
 80008b6:	d908      	bls.n	80008ca <__udivmoddi4+0x1e2>
 80008b8:	eb1c 0101 	adds.w	r1, ip, r1
 80008bc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008c0:	d26c      	bcs.n	800099c <__udivmoddi4+0x2b4>
 80008c2:	458e      	cmp	lr, r1
 80008c4:	d96a      	bls.n	800099c <__udivmoddi4+0x2b4>
 80008c6:	3802      	subs	r0, #2
 80008c8:	4461      	add	r1, ip
 80008ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ce:	fba0 9402 	umull	r9, r4, r0, r2
 80008d2:	eba1 010e 	sub.w	r1, r1, lr
 80008d6:	42a1      	cmp	r1, r4
 80008d8:	46c8      	mov	r8, r9
 80008da:	46a6      	mov	lr, r4
 80008dc:	d356      	bcc.n	800098c <__udivmoddi4+0x2a4>
 80008de:	d053      	beq.n	8000988 <__udivmoddi4+0x2a0>
 80008e0:	b15d      	cbz	r5, 80008fa <__udivmoddi4+0x212>
 80008e2:	ebb3 0208 	subs.w	r2, r3, r8
 80008e6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ea:	fa01 f707 	lsl.w	r7, r1, r7
 80008ee:	fa22 f306 	lsr.w	r3, r2, r6
 80008f2:	40f1      	lsrs	r1, r6
 80008f4:	431f      	orrs	r7, r3
 80008f6:	e9c5 7100 	strd	r7, r1, [r5]
 80008fa:	2600      	movs	r6, #0
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	f1c2 0320 	rsb	r3, r2, #32
 8000906:	40d8      	lsrs	r0, r3
 8000908:	fa0c fc02 	lsl.w	ip, ip, r2
 800090c:	fa21 f303 	lsr.w	r3, r1, r3
 8000910:	4091      	lsls	r1, r2
 8000912:	4301      	orrs	r1, r0
 8000914:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000920:	fb07 3610 	mls	r6, r7, r0, r3
 8000924:	0c0b      	lsrs	r3, r1, #16
 8000926:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800092a:	fb00 f60e 	mul.w	r6, r0, lr
 800092e:	429e      	cmp	r6, r3
 8000930:	fa04 f402 	lsl.w	r4, r4, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x260>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f100 38ff 	add.w	r8, r0, #4294967295
 800093e:	d22f      	bcs.n	80009a0 <__udivmoddi4+0x2b8>
 8000940:	429e      	cmp	r6, r3
 8000942:	d92d      	bls.n	80009a0 <__udivmoddi4+0x2b8>
 8000944:	3802      	subs	r0, #2
 8000946:	4463      	add	r3, ip
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	b289      	uxth	r1, r1
 800094c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000950:	fb07 3316 	mls	r3, r7, r6, r3
 8000954:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000958:	fb06 f30e 	mul.w	r3, r6, lr
 800095c:	428b      	cmp	r3, r1
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x28a>
 8000960:	eb1c 0101 	adds.w	r1, ip, r1
 8000964:	f106 38ff 	add.w	r8, r6, #4294967295
 8000968:	d216      	bcs.n	8000998 <__udivmoddi4+0x2b0>
 800096a:	428b      	cmp	r3, r1
 800096c:	d914      	bls.n	8000998 <__udivmoddi4+0x2b0>
 800096e:	3e02      	subs	r6, #2
 8000970:	4461      	add	r1, ip
 8000972:	1ac9      	subs	r1, r1, r3
 8000974:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000978:	e738      	b.n	80007ec <__udivmoddi4+0x104>
 800097a:	462e      	mov	r6, r5
 800097c:	4628      	mov	r0, r5
 800097e:	e705      	b.n	800078c <__udivmoddi4+0xa4>
 8000980:	4606      	mov	r6, r0
 8000982:	e6e3      	b.n	800074c <__udivmoddi4+0x64>
 8000984:	4618      	mov	r0, r3
 8000986:	e6f8      	b.n	800077a <__udivmoddi4+0x92>
 8000988:	454b      	cmp	r3, r9
 800098a:	d2a9      	bcs.n	80008e0 <__udivmoddi4+0x1f8>
 800098c:	ebb9 0802 	subs.w	r8, r9, r2
 8000990:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000994:	3801      	subs	r0, #1
 8000996:	e7a3      	b.n	80008e0 <__udivmoddi4+0x1f8>
 8000998:	4646      	mov	r6, r8
 800099a:	e7ea      	b.n	8000972 <__udivmoddi4+0x28a>
 800099c:	4620      	mov	r0, r4
 800099e:	e794      	b.n	80008ca <__udivmoddi4+0x1e2>
 80009a0:	4640      	mov	r0, r8
 80009a2:	e7d1      	b.n	8000948 <__udivmoddi4+0x260>
 80009a4:	46d0      	mov	r8, sl
 80009a6:	e77b      	b.n	80008a0 <__udivmoddi4+0x1b8>
 80009a8:	3b02      	subs	r3, #2
 80009aa:	4461      	add	r1, ip
 80009ac:	e732      	b.n	8000814 <__udivmoddi4+0x12c>
 80009ae:	4630      	mov	r0, r6
 80009b0:	e709      	b.n	80007c6 <__udivmoddi4+0xde>
 80009b2:	4464      	add	r4, ip
 80009b4:	3802      	subs	r0, #2
 80009b6:	e742      	b.n	800083e <__udivmoddi4+0x156>

080009b8 <__aeabi_idiv0>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <accel_init>:
#include "accel.h"


init_mpu_state init_state;

init_mpu_state accel_init(I2C_TypeDef * I2C_PORT){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
	I2C_config(I2C_PORT);
 80009c6:	6838      	ldr	r0, [r7, #0]
 80009c8:	f000 f8d0 	bl	8000b6c <I2C_config>
	/*
	 *
	 * Se deshabilita la posibilidad de que el mpu sea master
	 * */

	if (I2C_write(MPU_ADDRES, CTRL_MASTER_I2C, 0b00000000u) == true){
 80009cc:	2200      	movs	r2, #0
 80009ce:	216a      	movs	r1, #106	; 0x6a
 80009d0:	2039      	movs	r0, #57	; 0x39
 80009d2:	f000 f955 	bl	8000c80 <I2C_write>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <accel_init+0x28>
		init_state.user_ctrl_st = true;
 80009dc:	4b37      	ldr	r3, [pc, #220]	; (8000abc <accel_init+0x100>)
 80009de:	2201      	movs	r2, #1
 80009e0:	715a      	strb	r2, [r3, #5]
 80009e2:	e002      	b.n	80009ea <accel_init+0x2e>
	}
	else{
		init_state.user_ctrl_st = false;
 80009e4:	4b35      	ldr	r3, [pc, #212]	; (8000abc <accel_init+0x100>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	715a      	strb	r2, [r3, #5]

/*
 * Se configura el módulo para que auto-seleccione la fuente de reloj (interna o externa)
 * */

	if (I2C_write(MPU_ADDRES, PWR_MGMNT_1,  0b00000001u) == true){
 80009ea:	2201      	movs	r2, #1
 80009ec:	216b      	movs	r1, #107	; 0x6b
 80009ee:	2039      	movs	r0, #57	; 0x39
 80009f0:	f000 f946 	bl	8000c80 <I2C_write>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <accel_init+0x46>
		init_state.clock_st = true;
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <accel_init+0x100>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	e002      	b.n	8000a08 <accel_init+0x4c>
	}
	else{
		init_state.clock_st = false;
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <accel_init+0x100>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]

/*
 * Se configura el módulo para deshabilitar el giroscopio
 * */

	if (I2C_write(MPU_ADDRES, PWR_MGMNT_2,  0b00001111u) == true){
 8000a08:	220f      	movs	r2, #15
 8000a0a:	216c      	movs	r1, #108	; 0x6c
 8000a0c:	2039      	movs	r0, #57	; 0x39
 8000a0e:	f000 f937 	bl	8000c80 <I2C_write>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <accel_init+0x64>
			init_state.gyro_disable_st = true;
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <accel_init+0x100>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	709a      	strb	r2, [r3, #2]
 8000a1e:	e002      	b.n	8000a26 <accel_init+0x6a>
	}
	else{
			init_state.gyro_disable_st = false;
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <accel_init+0x100>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	709a      	strb	r2, [r3, #2]

/*
 * Se configura el módulo para deshabilitar el magnetómetro
 * */

	if (I2C_write(MAG_ID, MAG_CTRL_CONFIG, 0b00000000) == true){
 8000a26:	2200      	movs	r2, #0
 8000a28:	210a      	movs	r1, #10
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 f928 	bl	8000c80 <I2C_write>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <accel_init+0x82>
		init_state.mag_set_sense_st = true;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <accel_init+0x100>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	721a      	strb	r2, [r3, #8]
 8000a3c:	e002      	b.n	8000a44 <accel_init+0x88>

	}
	else{
		init_state.mag_set_sense_st = false;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <accel_init+0x100>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	721a      	strb	r2, [r3, #8]

/*
 * Se configura la escala de medición del acelerómetro se escoge 4g
 * */

	if (I2C_write(MPU_ADDRES, ACCEL_CONFIG, 0b00001000u) == true){
 8000a44:	2208      	movs	r2, #8
 8000a46:	211c      	movs	r1, #28
 8000a48:	2039      	movs	r0, #57	; 0x39
 8000a4a:	f000 f919 	bl	8000c80 <I2C_write>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <accel_init+0xa0>
		init_state.accel_st = true;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <accel_init+0x100>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	705a      	strb	r2, [r3, #1]
 8000a5a:	e002      	b.n	8000a62 <accel_init+0xa6>
	}
	else{
		init_state.accel_st = false;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <accel_init+0x100>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	705a      	strb	r2, [r3, #1]

/*
 * Se configura el bloque de filtrado del acelerómetro
 * */

	if (I2C_write(MPU_ADDRES, ACCEL_CONFIG_FILTER, 0b00000101) == true ){
 8000a62:	2205      	movs	r2, #5
 8000a64:	211d      	movs	r1, #29
 8000a66:	2039      	movs	r0, #57	; 0x39
 8000a68:	f000 f90a 	bl	8000c80 <I2C_write>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <accel_init+0xbe>
		init_state.filter_accel_st = true;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <accel_init+0x100>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	70da      	strb	r2, [r3, #3]
 8000a78:	e002      	b.n	8000a80 <accel_init+0xc4>
	}
	else{
		init_state.filter_accel_st = false;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <accel_init+0x100>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	70da      	strb	r2, [r3, #3]


/*
 * Se deshabilita el modo bypass porque no se usan sensores externos
 * */
	if (I2C_write(MPU_ADDRES, BYPASS_CONFIG_I2C, INIT_BYTE_55) == true){
 8000a80:	2202      	movs	r2, #2
 8000a82:	2137      	movs	r1, #55	; 0x37
 8000a84:	2039      	movs	r0, #57	; 0x39
 8000a86:	f000 f8fb 	bl	8000c80 <I2C_write>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <accel_init+0xdc>
		init_state.bypass_i2c_st = true;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <accel_init+0x100>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	719a      	strb	r2, [r3, #6]
 8000a96:	e002      	b.n	8000a9e <accel_init+0xe2>
	}
	else{
		init_state.bypass_i2c_st = false;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <accel_init+0x100>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	719a      	strb	r2, [r3, #6]
	}

	return init_state;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4906      	ldr	r1, [pc, #24]	; (8000abc <accel_init+0x100>)
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	cb03      	ldmia	r3!, {r0, r1}
 8000aa8:	6010      	str	r0, [r2, #0]
 8000aaa:	6051      	str	r1, [r2, #4]
 8000aac:	8819      	ldrh	r1, [r3, #0]
 8000aae:	789b      	ldrb	r3, [r3, #2]
 8000ab0:	8111      	strh	r1, [r2, #8]
 8000ab2:	7293      	strb	r3, [r2, #10]
}
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000008c 	.word	0x2000008c

08000ac0 <accel_getData>:


accel_data accel_getData(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0
	uint8_t acum_accel_data_bits[6] = {0};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	2300      	movs	r3, #0
 8000acc:	843b      	strh	r3, [r7, #32]
	accel_data accel_data;

	I2C_read(MPU_ADDRES, ACCEL_X_High, acum_accel_data_bits, 6);
 8000ace:	f107 021c 	add.w	r2, r7, #28
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	213b      	movs	r1, #59	; 0x3b
 8000ad6:	2039      	movs	r0, #57	; 0x39
 8000ad8:	f000 f896 	bl	8000c08 <I2C_read>

	accel_data.x_accel  = (double)((acum_accel_data_bits[0]<<8)|(acum_accel_data_bits[1]));
 8000adc:	7f3b      	ldrb	r3, [r7, #28]
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	7f7a      	ldrb	r2, [r7, #29]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd2d 	bl	8000544 <__aeabi_i2d>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	4610      	mov	r0, r2
 8000af0:	4619      	mov	r1, r3
 8000af2:	f7ff fd91 	bl	8000618 <__aeabi_d2f>
 8000af6:	4603      	mov	r3, r0
 8000af8:	613b      	str	r3, [r7, #16]
	accel_data.y_accel  = (double)((acum_accel_data_bits[2]<<8)|(acum_accel_data_bits[3]));
 8000afa:	7fbb      	ldrb	r3, [r7, #30]
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	7ffa      	ldrb	r2, [r7, #31]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd1e 	bl	8000544 <__aeabi_i2d>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	4610      	mov	r0, r2
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f7ff fd82 	bl	8000618 <__aeabi_d2f>
 8000b14:	4603      	mov	r3, r0
 8000b16:	617b      	str	r3, [r7, #20]
	accel_data.z_accel  = (double)((acum_accel_data_bits[4]<<8)|(acum_accel_data_bits[5]));
 8000b18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000b22:	4313      	orrs	r3, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fd0d 	bl	8000544 <__aeabi_i2d>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4619      	mov	r1, r3
 8000b32:	f7ff fd71 	bl	8000618 <__aeabi_d2f>
 8000b36:	4603      	mov	r3, r0
 8000b38:	61bb      	str	r3, [r7, #24]

	return accel_data;
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	f107 0210 	add.w	r2, r7, #16
 8000b42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4e:	ee06 1a90 	vmov	s13, r1
 8000b52:	ee07 2a10 	vmov	s14, r2
 8000b56:	ee07 3a90 	vmov	s15, r3
}
 8000b5a:	eeb0 0a66 	vmov.f32	s0, s13
 8000b5e:	eef0 0a47 	vmov.f32	s1, s14
 8000b62:	eeb0 1a67 	vmov.f32	s2, s15
 8000b66:	3730      	adds	r7, #48	; 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <I2C_config>:
 */


I2C_HandleTypeDef I2cHandle;

bool_t I2C_config(I2C_TypeDef * I2C_PORT){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

	bool_t state = false;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

	I2cHandle.Instance = I2C_PORT;
 8000b78:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <I2C_config+0x94>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
	I2cHandle.Init.ClockSpeed = 400000;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <I2C_config+0x94>)
 8000b80:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <I2C_config+0x98>)
 8000b82:	605a      	str	r2, [r3, #4]
	I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <I2C_config+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
	I2cHandle.Init.OwnAddress1 = I2C_ADD_MASTER;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <I2C_config+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
	I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <I2C_config+0x94>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b96:	611a      	str	r2, [r3, #16]
	I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <I2C_config+0x94>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
	I2cHandle.Init.OwnAddress2 = 0;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <I2C_config+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
	I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <I2C_config+0x94>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
	I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <I2C_config+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]


	if(HAL_I2C_Init(&I2cHandle) != HAL_OK){
 8000bb0:	4813      	ldr	r0, [pc, #76]	; (8000c00 <I2C_config+0x94>)
 8000bb2:	f001 fbb5 	bl	8002320 <HAL_I2C_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <I2C_config+0x56>

	  state = true;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e001      	b.n	8000bc6 <I2C_config+0x5a>
	}else{
		state = false;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
	}



	if (HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <I2C_config+0x94>)
 8000bca:	f002 fb82 	bl	80032d2 <HAL_I2CEx_ConfigAnalogFilter>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <I2C_config+0x6e>
	  {
		state = true;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e001      	b.n	8000bde <I2C_config+0x72>
	  }else
	  {
		  state = false;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
	  }



	  if (HAL_I2CEx_ConfigDigitalFilter(&I2cHandle, 0) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <I2C_config+0x94>)
 8000be2:	f002 fbb2 	bl	800334a <HAL_I2CEx_ConfigDigitalFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <I2C_config+0x86>
	  {
		  state = true;
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e001      	b.n	8000bf6 <I2C_config+0x8a>
	  }else
	  {
		  state = false;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73fb      	strb	r3, [r7, #15]
	  }

	  return state;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000098 	.word	0x20000098
 8000c04:	00061a80 	.word	0x00061a80

08000c08 <I2C_read>:



bool_t I2C_read(uint8_t i2c_addres, uint8_t reg_addres, uint8_t *buffer_rx, uint8_t buffer_rx_size){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af04      	add	r7, sp, #16
 8000c0e:	603a      	str	r2, [r7, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	460b      	mov	r3, r1
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	717b      	strb	r3, [r7, #5]

	bool_t state = false;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]


    while(HAL_I2C_Mem_Read(&I2cHandle, (uint16_t)(i2c_addres<<1), reg_addres, 1u, buffer_rx, 1u, 100u) != HAL_OK){
 8000c22:	e00a      	b.n	8000c3a <I2C_read+0x32>

        if (HAL_I2C_GetError(&I2cHandle) != HAL_I2C_ERROR_AF)
 8000c24:	4815      	ldr	r0, [pc, #84]	; (8000c7c <I2C_read+0x74>)
 8000c26:	f001 ffed 	bl	8002c04 <HAL_I2C_GetError>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d002      	beq.n	8000c36 <I2C_read+0x2e>
        {
        	state = false;
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e001      	b.n	8000c3a <I2C_read+0x32>
        }else{state = true;}
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
    while(HAL_I2C_Mem_Read(&I2cHandle, (uint16_t)(i2c_addres<<1), reg_addres, 1u, buffer_rx, 1u, 100u) != HAL_OK){
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	b299      	uxth	r1, r3
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	2364      	movs	r3, #100	; 0x64
 8000c48:	9302      	str	r3, [sp, #8]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2301      	movs	r3, #1
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <I2C_read+0x74>)
 8000c56:	f001 fda1 	bl	800279c <HAL_I2C_Mem_Read>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1e1      	bne.n	8000c24 <I2C_read+0x1c>
    }


    while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 8000c60:	e001      	b.n	8000c66 <I2C_read+0x5e>
    {
    	state = false;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
    while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <I2C_read+0x74>)
 8000c68:	f001 ffbe 	bl	8002be8 <HAL_I2C_GetState>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b20      	cmp	r3, #32
 8000c70:	d1f7      	bne.n	8000c62 <I2C_read+0x5a>
    }

    return state;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000098 	.word	0x20000098

08000c80 <I2C_write>:


bool_t I2C_write(uint8_t i2c_add, uint8_t reg_addres, uint8_t reg_content){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	717b      	strb	r3, [r7, #5]

	bool_t state = false;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]


    while(HAL_I2C_Mem_Write(&I2cHandle, i2c_add, reg_addres, 1u, &reg_content, 1u, 100u) != HAL_OK)
 8000c96:	e00a      	b.n	8000cae <I2C_write+0x2e>
    {


        if (HAL_I2C_GetError(&I2cHandle) != HAL_I2C_ERROR_AF){
 8000c98:	4814      	ldr	r0, [pc, #80]	; (8000cec <I2C_write+0x6c>)
 8000c9a:	f001 ffb3 	bl	8002c04 <HAL_I2C_GetError>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d002      	beq.n	8000caa <I2C_write+0x2a>
        	state = false;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e001      	b.n	8000cae <I2C_write+0x2e>
        }else{state = true;}
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
    while(HAL_I2C_Mem_Write(&I2cHandle, i2c_add, reg_addres, 1u, &reg_content, 1u, 100u) != HAL_OK)
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	b299      	uxth	r1, r3
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	2364      	movs	r3, #100	; 0x64
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	1d7b      	adds	r3, r7, #5
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <I2C_write+0x6c>)
 8000cc6:	f001 fc6f 	bl	80025a8 <HAL_I2C_Mem_Write>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1e3      	bne.n	8000c98 <I2C_write+0x18>

    }

      while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY){
 8000cd0:	e001      	b.n	8000cd6 <I2C_write+0x56>
    	  state = false;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
      while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY){
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <I2C_write+0x6c>)
 8000cd8:	f001 ff86 	bl	8002be8 <HAL_I2C_GetState>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b20      	cmp	r3, #32
 8000ce0:	d1f7      	bne.n	8000cd2 <I2C_write+0x52>
      }

    return state;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000098 	.word	0x20000098

08000cf0 <vPrintString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vPrintString( const char *pcString )
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit( &huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10 );
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fa79 	bl	80001f0 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	230a      	movs	r3, #10
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <vPrintString+0x24>)
 8000d08:	f003 f961 	bl	8003fce <HAL_UART_Transmit>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000314 	.word	0x20000314

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1e:	f000 fca9 	bl	8001674 <HAL_Init>

  /* USER CODE BEGIN Init */

  mpu_init_state = accel_init(I2C1);
 8000d22:	4c2f      	ldr	r4, [pc, #188]	; (8000de0 <main+0xc8>)
 8000d24:	463b      	mov	r3, r7
 8000d26:	492f      	ldr	r1, [pc, #188]	; (8000de4 <main+0xcc>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fe47 	bl	80009bc <accel_init>
 8000d2e:	4623      	mov	r3, r4
 8000d30:	463a      	mov	r2, r7
 8000d32:	6810      	ldr	r0, [r2, #0]
 8000d34:	6851      	ldr	r1, [r2, #4]
 8000d36:	c303      	stmia	r3!, {r0, r1}
 8000d38:	8911      	ldrh	r1, [r2, #8]
 8000d3a:	7a92      	ldrb	r2, [r2, #10]
 8000d3c:	8019      	strh	r1, [r3, #0]
 8000d3e:	709a      	strb	r2, [r3, #2]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f860 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d44:	f000 f96e 	bl	8001024 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d48:	f000 f8c6 	bl	8000ed8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d4c:	f000 f912 	bl	8000f74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d50:	f000 f93a 	bl	8000fc8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(mpu_init_state.accel_st){
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <main+0xc8>)
 8000d56:	785b      	ldrb	r3, [r3, #1]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <main+0x4c>
		  vPrintString( "Acelerómetro Ok\n\n" );
 8000d5c:	4822      	ldr	r0, [pc, #136]	; (8000de8 <main+0xd0>)
 8000d5e:	f7ff ffc7 	bl	8000cf0 <vPrintString>
 8000d62:	e002      	b.n	8000d6a <main+0x52>
	  }else{
		  vPrintString( "Acelerómetro Fail\n\n" );
 8000d64:	4821      	ldr	r0, [pc, #132]	; (8000dec <main+0xd4>)
 8000d66:	f7ff ffc3 	bl	8000cf0 <vPrintString>
	  }


	  accel_lectures = accel_getData();
 8000d6a:	f7ff fea9 	bl	8000ac0 <accel_getData>
 8000d6e:	eef0 6a40 	vmov.f32	s13, s0
 8000d72:	eeb0 7a60 	vmov.f32	s14, s1
 8000d76:	eef0 7a41 	vmov.f32	s15, s2
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <main+0xd8>)
 8000d7c:	edc3 6a00 	vstr	s13, [r3]
 8000d80:	ed83 7a01 	vstr	s14, [r3, #4]
 8000d84:	edc3 7a02 	vstr	s15, [r3, #8]

	  sprintf(print_buffer, "accel_x: %u", (unsigned int)accel_lectures.x_accel);
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <main+0xd8>)
 8000d8a:	edd3 7a00 	vldr	s15, [r3]
 8000d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d92:	ee17 2a90 	vmov	r2, s15
 8000d96:	4917      	ldr	r1, [pc, #92]	; (8000df4 <main+0xdc>)
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <main+0xe0>)
 8000d9a:	f003 ffc1 	bl	8004d20 <siprintf>
	  vPrintString(print_buffer);
 8000d9e:	4816      	ldr	r0, [pc, #88]	; (8000df8 <main+0xe0>)
 8000da0:	f7ff ffa6 	bl	8000cf0 <vPrintString>

	  sprintf(print_buffer, "accel_y: %u", (unsigned int)accel_lectures.y_accel);
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <main+0xd8>)
 8000da6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dae:	ee17 2a90 	vmov	r2, s15
 8000db2:	4912      	ldr	r1, [pc, #72]	; (8000dfc <main+0xe4>)
 8000db4:	4810      	ldr	r0, [pc, #64]	; (8000df8 <main+0xe0>)
 8000db6:	f003 ffb3 	bl	8004d20 <siprintf>
	  vPrintString(print_buffer);
 8000dba:	480f      	ldr	r0, [pc, #60]	; (8000df8 <main+0xe0>)
 8000dbc:	f7ff ff98 	bl	8000cf0 <vPrintString>

	  sprintf(print_buffer, "accel_z: %u", (unsigned int)accel_lectures.z_accel);
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <main+0xd8>)
 8000dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dca:	ee17 2a90 	vmov	r2, s15
 8000dce:	490c      	ldr	r1, [pc, #48]	; (8000e00 <main+0xe8>)
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <main+0xe0>)
 8000dd2:	f003 ffa5 	bl	8004d20 <siprintf>
	  vPrintString(print_buffer);
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <main+0xe0>)
 8000dd8:	f7ff ff8a 	bl	8000cf0 <vPrintString>
	  if(mpu_init_state.accel_st){
 8000ddc:	e7ba      	b.n	8000d54 <main+0x3c>
 8000dde:	bf00      	nop
 8000de0:	20000870 	.word	0x20000870
 8000de4:	40005400 	.word	0x40005400
 8000de8:	08005614 	.word	0x08005614
 8000dec:	08005628 	.word	0x08005628
 8000df0:	20000864 	.word	0x20000864
 8000df4:	08005640 	.word	0x08005640
 8000df8:	2000087c 	.word	0x2000087c
 8000dfc:	0800564c 	.word	0x0800564c
 8000e00:	08005658 	.word	0x08005658

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	; 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	2230      	movs	r2, #48	; 0x30
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 ff7c 	bl	8004d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <SystemClock_Config+0xcc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <SystemClock_Config+0xcc>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <SystemClock_Config+0xcc>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e78:	23a8      	movs	r3, #168	; 0xa8
 8000e7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e80:	2307      	movs	r3, #7
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 fbbb 	bl	8003604 <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e94:	f000 f974 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ea8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fe1c 	bl	8003af4 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ec2:	f000 f95d 	bl	8001180 <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3750      	adds	r7, #80	; 0x50
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_ETH_Init+0x84>)
 8000ede:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <MX_ETH_Init+0x88>)
 8000ee0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <MX_ETH_Init+0x8c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MX_ETH_Init+0x8c>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_ETH_Init+0x8c>)
 8000ef0:	22e1      	movs	r2, #225	; 0xe1
 8000ef2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <MX_ETH_Init+0x8c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_ETH_Init+0x8c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <MX_ETH_Init+0x8c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_ETH_Init+0x84>)
 8000f08:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <MX_ETH_Init+0x8c>)
 8000f0a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_ETH_Init+0x84>)
 8000f0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f12:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_ETH_Init+0x84>)
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <MX_ETH_Init+0x90>)
 8000f18:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_ETH_Init+0x84>)
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <MX_ETH_Init+0x94>)
 8000f1e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_ETH_Init+0x84>)
 8000f22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f26:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <MX_ETH_Init+0x84>)
 8000f2a:	f000 fd1f 	bl	800196c <HAL_ETH_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f34:	f000 f924 	bl	8001180 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f38:	2238      	movs	r2, #56	; 0x38
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <MX_ETH_Init+0x98>)
 8000f3e:	f003 fee7 	bl	8004d10 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_ETH_Init+0x98>)
 8000f44:	2221      	movs	r2, #33	; 0x21
 8000f46:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_ETH_Init+0x98>)
 8000f4a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000f4e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <MX_ETH_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000264 	.word	0x20000264
 8000f60:	40028000 	.word	0x40028000
 8000f64:	200008e0 	.word	0x200008e0
 8000f68:	200001c4 	.word	0x200001c4
 8000f6c:	20000124 	.word	0x20000124
 8000f70:	200000ec 	.word	0x200000ec

08000f74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_USART3_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000fac:	f002 ffc2 	bl	8003f34 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fb6:	f000 f8e3 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000314 	.word	0x20000314
 8000fc4:	40004800 	.word	0x40004800

08000fc8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001000:	2201      	movs	r2, #1
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100c:	f002 f9dc 	bl	80033c8 <HAL_PCD_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001016:	f000 f8b3 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000358 	.word	0x20000358

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <MX_GPIO_Init+0x14c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <MX_GPIO_Init+0x14c>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b49      	ldr	r3, [pc, #292]	; (8001170 <MX_GPIO_Init+0x14c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	4b45      	ldr	r3, [pc, #276]	; (8001170 <MX_GPIO_Init+0x14c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a44      	ldr	r2, [pc, #272]	; (8001170 <MX_GPIO_Init+0x14c>)
 8001060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b42      	ldr	r3, [pc, #264]	; (8001170 <MX_GPIO_Init+0x14c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <MX_GPIO_Init+0x14c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a3d      	ldr	r2, [pc, #244]	; (8001170 <MX_GPIO_Init+0x14c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <MX_GPIO_Init+0x14c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <MX_GPIO_Init+0x14c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a36      	ldr	r2, [pc, #216]	; (8001170 <MX_GPIO_Init+0x14c>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <MX_GPIO_Init+0x14c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <MX_GPIO_Init+0x14c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a2f      	ldr	r2, [pc, #188]	; (8001170 <MX_GPIO_Init+0x14c>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <MX_GPIO_Init+0x14c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <MX_GPIO_Init+0x14c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a28      	ldr	r2, [pc, #160]	; (8001170 <MX_GPIO_Init+0x14c>)
 80010d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <MX_GPIO_Init+0x14c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80010e8:	4822      	ldr	r0, [pc, #136]	; (8001174 <MX_GPIO_Init+0x150>)
 80010ea:	f001 f8ff 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4821      	ldr	r0, [pc, #132]	; (8001178 <MX_GPIO_Init+0x154>)
 80010f4:	f001 f8fa 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	481b      	ldr	r0, [pc, #108]	; (800117c <MX_GPIO_Init+0x158>)
 8001110:	f000 ff40 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001114:	f244 0381 	movw	r3, #16513	; 0x4081
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_GPIO_Init+0x150>)
 800112e:	f000 ff31 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <MX_GPIO_Init+0x154>)
 800114a:	f000 ff23 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_GPIO_Init+0x154>)
 8001162:	f000 ff17 	bl	8001f94 <HAL_GPIO_Init>

}
 8001166:	bf00      	nop
 8001168:	3730      	adds	r7, #48	; 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400
 8001178:	40021800 	.word	0x40021800
 800117c:	40020800 	.word	0x40020800

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	e7fe      	b.n	8001188 <Error_Handler+0x8>
	...

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_MspInit+0x4c>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x4c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x4c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08e      	sub	sp, #56	; 0x38
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a55      	ldr	r2, [pc, #340]	; (8001350 <HAL_ETH_MspInit+0x174>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	f040 80a4 	bne.w	8001348 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
 8001204:	4b53      	ldr	r3, [pc, #332]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a52      	ldr	r2, [pc, #328]	; (8001354 <HAL_ETH_MspInit+0x178>)
 800120a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b50      	ldr	r3, [pc, #320]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	4b4c      	ldr	r3, [pc, #304]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001226:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b49      	ldr	r3, [pc, #292]	; (8001354 <HAL_ETH_MspInit+0x178>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	4b45      	ldr	r3, [pc, #276]	; (8001354 <HAL_ETH_MspInit+0x178>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a44      	ldr	r2, [pc, #272]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <HAL_ETH_MspInit+0x178>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <HAL_ETH_MspInit+0x178>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a3d      	ldr	r2, [pc, #244]	; (8001354 <HAL_ETH_MspInit+0x178>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	4b37      	ldr	r3, [pc, #220]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a36      	ldr	r2, [pc, #216]	; (8001354 <HAL_ETH_MspInit+0x178>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <HAL_ETH_MspInit+0x178>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_ETH_MspInit+0x178>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_ETH_MspInit+0x178>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a28      	ldr	r2, [pc, #160]	; (8001354 <HAL_ETH_MspInit+0x178>)
 80012b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <HAL_ETH_MspInit+0x178>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012c4:	2332      	movs	r3, #50	; 0x32
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012d4:	230b      	movs	r3, #11
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	481e      	ldr	r0, [pc, #120]	; (8001358 <HAL_ETH_MspInit+0x17c>)
 80012e0:	f000 fe58 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012e4:	2386      	movs	r3, #134	; 0x86
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012f4:	230b      	movs	r3, #11
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	4817      	ldr	r0, [pc, #92]	; (800135c <HAL_ETH_MspInit+0x180>)
 8001300:	f000 fe48 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001316:	230b      	movs	r3, #11
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	480f      	ldr	r0, [pc, #60]	; (8001360 <HAL_ETH_MspInit+0x184>)
 8001322:	f000 fe37 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001326:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001338:	230b      	movs	r3, #11
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4808      	ldr	r0, [pc, #32]	; (8001364 <HAL_ETH_MspInit+0x188>)
 8001344:	f000 fe26 	bl	8001f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3738      	adds	r7, #56	; 0x38
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40028000 	.word	0x40028000
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40021800 	.word	0x40021800

08001368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_I2C_MspInit+0x84>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d12c      	bne.n	80013e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ac:	2312      	movs	r3, #18
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b8:	2304      	movs	r3, #4
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <HAL_I2C_MspInit+0x8c>)
 80013c4:	f000 fde6 	bl	8001f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 80013d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	; 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40005400 	.word	0x40005400
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020400 	.word	0x40020400

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_UART_MspInit+0x84>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12c      	bne.n	8001474 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_UART_MspInit+0x88>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_UART_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001452:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001464:	2307      	movs	r3, #7
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_UART_MspInit+0x8c>)
 8001470:	f000 fd90 	bl	8001f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40004800 	.word	0x40004800
 8001480:	40023800 	.word	0x40023800
 8001484:	40020c00 	.word	0x40020c00

08001488 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a8:	d13f      	bne.n	800152a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_PCD_MspInit+0xac>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_PCD_MspInit+0xac>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_PCD_MspInit+0xac>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014d8:	230a      	movs	r3, #10
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4815      	ldr	r0, [pc, #84]	; (8001538 <HAL_PCD_MspInit+0xb0>)
 80014e4:	f000 fd56 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	480e      	ldr	r0, [pc, #56]	; (8001538 <HAL_PCD_MspInit+0xb0>)
 80014fe:	f000 fd49 	bl	8001f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6353      	str	r3, [r2, #52]	; 0x34
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f8c6 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f003 fb7c 	bl	8004cbc <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20030000 	.word	0x20030000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	200008e8 	.word	0x200008e8
 80015f8:	20000900 	.word	0x20000900

080015fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <SystemInit+0x20>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <SystemInit+0x20>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001658 <LoopFillZerobss+0x12>
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <LoopFillZerobss+0x16>)
 8001626:	490e      	ldr	r1, [pc, #56]	; (8001660 <LoopFillZerobss+0x1a>)
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <LoopFillZerobss+0x1e>)
 800162a:	2300      	movs	r3, #0
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:
 800162e:	58d4      	ldr	r4, [r2, r3]
 8001630:	50c4      	str	r4, [r0, r3]
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:
 8001634:	18c4      	adds	r4, r0, r3
 8001636:	428c      	cmp	r4, r1
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <LoopFillZerobss+0x22>)
 800163c:	4c0b      	ldr	r4, [pc, #44]	; (800166c <LoopFillZerobss+0x26>)
 800163e:	2300      	movs	r3, #0
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:
 8001646:	42a2      	cmp	r2, r4
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>
 800164a:	f7ff ffd7 	bl	80015fc <SystemInit>
 800164e:	f003 fb3b 	bl	8004cc8 <__libc_init_array>
 8001652:	f7ff fb61 	bl	8000d18 <main>
 8001656:	4770      	bx	lr
 8001658:	20030000 	.word	0x20030000
 800165c:	20000000 	.word	0x20000000
 8001660:	20000070 	.word	0x20000070
 8001664:	080056c0 	.word	0x080056c0
 8001668:	20000070 	.word	0x20000070
 800166c:	20000900 	.word	0x20000900

08001670 <ADC_IRQHandler>:
 8001670:	e7fe      	b.n	8001670 <ADC_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_Init+0x40>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_Init+0x40>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_Init+0x40>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f931 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fd70 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f93b 	bl	8001952 <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f911 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000000 	.word	0x20000000
 8001710:	20000008 	.word	0x20000008
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008
 800173c:	200008ec 	.word	0x200008ec

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200008ec 	.word	0x200008ec

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff8e 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff47 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff5c 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff8e 	bl	8001858 <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5d 	bl	8001804 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffb0 	bl	80018c0 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06c      	b.n	8001a58 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001984:	2b00      	cmp	r3, #0
 8001986:	d106      	bne.n	8001996 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2223      	movs	r2, #35	; 0x23
 800198c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fc23 	bl	80011dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_ETH_Init+0xf4>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <HAL_ETH_Init+0xf4>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_ETH_Init+0xf4>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019b2:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <HAL_ETH_Init+0xf8>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <HAL_ETH_Init+0xf8>)
 80019b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_ETH_Init+0xf8>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	4927      	ldr	r1, [pc, #156]	; (8001a64 <HAL_ETH_Init+0xf8>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_ETH_Init+0xf8>)
 80019ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e8:	f7ff feaa 	bl	8001740 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019ee:	e011      	b.n	8001a14 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019f0:	f7ff fea6 	bl	8001740 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019fe:	d909      	bls.n	8001a14 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2204      	movs	r2, #4
 8001a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	22e0      	movs	r2, #224	; 0xe0
 8001a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e021      	b.n	8001a58 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1e4      	bne.n	80019f0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f944 	bl	8001cb4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f9eb 	bl	8001e08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fa41 	bl	8001eba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2100      	movs	r1, #0
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f9a9 	bl	8001d98 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2210      	movs	r2, #16
 8001a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40013800 	.word	0x40013800

08001a68 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <ETH_SetMACConfig+0x134>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	7c1b      	ldrb	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <ETH_SetMACConfig+0x28>
 8001a8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a8e:	e000      	b.n	8001a92 <ETH_SetMACConfig+0x2a>
 8001a90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	7c5b      	ldrb	r3, [r3, #17]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <ETH_SetMACConfig+0x38>
 8001a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9e:	e000      	b.n	8001aa2 <ETH_SetMACConfig+0x3a>
 8001aa0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aa2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001aa8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	7fdb      	ldrb	r3, [r3, #31]
 8001aae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ab0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ab6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	7f92      	ldrb	r2, [r2, #30]
 8001abc:	2a00      	cmp	r2, #0
 8001abe:	d102      	bne.n	8001ac6 <ETH_SetMACConfig+0x5e>
 8001ac0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac4:	e000      	b.n	8001ac8 <ETH_SetMACConfig+0x60>
 8001ac6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ac8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	7f1b      	ldrb	r3, [r3, #28]
 8001ace:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ad0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ad6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ade:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ae6:	2a00      	cmp	r2, #0
 8001ae8:	d102      	bne.n	8001af0 <ETH_SetMACConfig+0x88>
 8001aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aee:	e000      	b.n	8001af2 <ETH_SetMACConfig+0x8a>
 8001af0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001af2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7bdb      	ldrb	r3, [r3, #15]
 8001af8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001afa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b08:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff fe18 	bl	8001758 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b46:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b4e:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001b54:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001b5c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001b64:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fde7 	bl	8001758 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	619a      	str	r2, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	ff20810f 	.word	0xff20810f

08001ba0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <ETH_SetDMAConfig+0x110>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	7b1b      	ldrb	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <ETH_SetDMAConfig+0x2c>
 8001bc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bca:	e000      	b.n	8001bce <ETH_SetDMAConfig+0x2e>
 8001bcc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	7b5b      	ldrb	r3, [r3, #13]
 8001bd2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bd4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	7f52      	ldrb	r2, [r2, #29]
 8001bda:	2a00      	cmp	r2, #0
 8001bdc:	d102      	bne.n	8001be4 <ETH_SetDMAConfig+0x44>
 8001bde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001be2:	e000      	b.n	8001be6 <ETH_SetDMAConfig+0x46>
 8001be4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001be6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	7b9b      	ldrb	r3, [r3, #14]
 8001bec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bf4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	7f1b      	ldrb	r3, [r3, #28]
 8001bfa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001bfc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7f9b      	ldrb	r3, [r3, #30]
 8001c02:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c04:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c12:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c14:	4313      	orrs	r3, r2
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c24:	461a      	mov	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff fd8e 	bl	8001758 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	461a      	mov	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	791b      	ldrb	r3, [r3, #4]
 8001c4e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c54:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c5a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c60:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c68:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c6a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c72:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c78:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c86:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff fd5f 	bl	8001758 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	f8de3f23 	.word	0xf8de3f23

08001cb4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b0a6      	sub	sp, #152	; 0x98
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fe9a 	bl	8001a68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d34:	2301      	movs	r3, #1
 8001d36:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d68:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ff08 	bl	8001ba0 <ETH_SetDMAConfig>
}
 8001d90:	bf00      	nop
 8001d92:	3798      	adds	r7, #152	; 0x98
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3305      	adds	r3, #5
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	3204      	adds	r2, #4
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <ETH_MACAddressConfig+0x68>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3303      	adds	r3, #3
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	061a      	lsls	r2, r3, #24
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <ETH_MACAddressConfig+0x6c>)
 8001dea:	4413      	add	r3, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	6013      	str	r3, [r2, #0]
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40028040 	.word	0x40028040
 8001e04:	40028044 	.word	0x40028044

08001e08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e03e      	b.n	8001e94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68d9      	ldr	r1, [r3, #12]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2200      	movs	r2, #0
 8001e32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	3206      	adds	r2, #6
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d80c      	bhi.n	8001e78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68d9      	ldr	r1, [r3, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	461a      	mov	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	e004      	b.n	8001e82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d9bd      	bls.n	8001e16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eac:	611a      	str	r2, [r3, #16]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	e046      	b.n	8001f56 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6919      	ldr	r1, [r3, #16]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f04:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f0c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	3212      	adds	r2, #18
 8001f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d80c      	bhi.n	8001f46 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6919      	ldr	r1, [r3, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	e004      	b.n	8001f50 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3301      	adds	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d9b5      	bls.n	8001ec8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f86:	60da      	str	r2, [r3, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e177      	b.n	80022a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	f040 8166 	bne.w	800229a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d005      	beq.n	8001fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d130      	bne.n	8002048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 0201 	and.w	r2, r3, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b03      	cmp	r3, #3
 8002052:	d017      	beq.n	8002084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d123      	bne.n	80020d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	220f      	movs	r2, #15
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	08da      	lsrs	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3208      	adds	r2, #8
 80020d2:	69b9      	ldr	r1, [r7, #24]
 80020d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0203 	and.w	r2, r3, #3
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80c0 	beq.w	800229a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <HAL_GPIO_Init+0x324>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <HAL_GPIO_Init+0x324>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_GPIO_Init+0x324>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002136:	4a61      	ldr	r2, [pc, #388]	; (80022bc <HAL_GPIO_Init+0x328>)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_GPIO_Init+0x32c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d037      	beq.n	80021d2 <HAL_GPIO_Init+0x23e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <HAL_GPIO_Init+0x330>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d031      	beq.n	80021ce <HAL_GPIO_Init+0x23a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a56      	ldr	r2, [pc, #344]	; (80022c8 <HAL_GPIO_Init+0x334>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02b      	beq.n	80021ca <HAL_GPIO_Init+0x236>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a55      	ldr	r2, [pc, #340]	; (80022cc <HAL_GPIO_Init+0x338>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d025      	beq.n	80021c6 <HAL_GPIO_Init+0x232>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a54      	ldr	r2, [pc, #336]	; (80022d0 <HAL_GPIO_Init+0x33c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <HAL_GPIO_Init+0x22e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a53      	ldr	r2, [pc, #332]	; (80022d4 <HAL_GPIO_Init+0x340>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x22a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_GPIO_Init+0x344>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x226>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a51      	ldr	r2, [pc, #324]	; (80022dc <HAL_GPIO_Init+0x348>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x222>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a50      	ldr	r2, [pc, #320]	; (80022e0 <HAL_GPIO_Init+0x34c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x21e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <HAL_GPIO_Init+0x350>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x21a>
 80021aa:	2309      	movs	r3, #9
 80021ac:	e012      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ae:	230a      	movs	r3, #10
 80021b0:	e010      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021b2:	2308      	movs	r3, #8
 80021b4:	e00e      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e00c      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ba:	2306      	movs	r3, #6
 80021bc:	e00a      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021be:	2305      	movs	r3, #5
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021d2:	2300      	movs	r3, #0
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f002 0203 	and.w	r2, r2, #3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e4:	4935      	ldr	r1, [pc, #212]	; (80022bc <HAL_GPIO_Init+0x328>)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_GPIO_Init+0x354>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002216:	4a34      	ldr	r2, [pc, #208]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221c:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <HAL_GPIO_Init+0x354>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002240:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_GPIO_Init+0x354>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3301      	adds	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	f67f ae84 	bls.w	8001fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40013800 	.word	0x40013800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40021400 	.word	0x40021400
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40021c00 	.word	0x40021c00
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40022400 	.word	0x40022400
 80022e8:	40013c00 	.word	0x40013c00

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e12b      	b.n	800258a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff f80e 	bl	8001368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002384:	f001 fdae 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8002388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a81      	ldr	r2, [pc, #516]	; (8002594 <HAL_I2C_Init+0x274>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d807      	bhi.n	80023a4 <HAL_I2C_Init+0x84>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4a80      	ldr	r2, [pc, #512]	; (8002598 <HAL_I2C_Init+0x278>)
 8002398:	4293      	cmp	r3, r2
 800239a:	bf94      	ite	ls
 800239c:	2301      	movls	r3, #1
 800239e:	2300      	movhi	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	e006      	b.n	80023b2 <HAL_I2C_Init+0x92>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a7d      	ldr	r2, [pc, #500]	; (800259c <HAL_I2C_Init+0x27c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bf94      	ite	ls
 80023ac:	2301      	movls	r3, #1
 80023ae:	2300      	movhi	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0e7      	b.n	800258a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a78      	ldr	r2, [pc, #480]	; (80025a0 <HAL_I2C_Init+0x280>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9b      	lsrs	r3, r3, #18
 80023c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a6a      	ldr	r2, [pc, #424]	; (8002594 <HAL_I2C_Init+0x274>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d802      	bhi.n	80023f4 <HAL_I2C_Init+0xd4>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3301      	adds	r3, #1
 80023f2:	e009      	b.n	8002408 <HAL_I2C_Init+0xe8>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	4a69      	ldr	r2, [pc, #420]	; (80025a4 <HAL_I2C_Init+0x284>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	3301      	adds	r3, #1
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	430b      	orrs	r3, r1
 800240e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800241a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	495c      	ldr	r1, [pc, #368]	; (8002594 <HAL_I2C_Init+0x274>)
 8002424:	428b      	cmp	r3, r1
 8002426:	d819      	bhi.n	800245c <HAL_I2C_Init+0x13c>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e59      	subs	r1, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fbb1 f3f3 	udiv	r3, r1, r3
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	f640 73fc 	movw	r3, #4092	; 0xffc
 800243c:	400b      	ands	r3, r1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_I2C_Init+0x138>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1e59      	subs	r1, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002456:	e051      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 8002458:	2304      	movs	r3, #4
 800245a:	e04f      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d111      	bne.n	8002488 <HAL_I2C_Init+0x168>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1e58      	subs	r0, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	440b      	add	r3, r1
 8002472:	fbb0 f3f3 	udiv	r3, r0, r3
 8002476:	3301      	adds	r3, #1
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e012      	b.n	80024ae <HAL_I2C_Init+0x18e>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1e58      	subs	r0, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	0099      	lsls	r1, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Init+0x196>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e022      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10e      	bne.n	80024dc <HAL_I2C_Init+0x1bc>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1e58      	subs	r0, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	440b      	add	r3, r1
 80024cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024da:	e00f      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e58      	subs	r0, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	0099      	lsls	r1, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	6809      	ldr	r1, [r1, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800252a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6911      	ldr	r1, [r2, #16]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68d2      	ldr	r2, [r2, #12]
 8002536:	4311      	orrs	r1, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	430b      	orrs	r3, r1
 800253e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	000186a0 	.word	0x000186a0
 8002598:	001e847f 	.word	0x001e847f
 800259c:	003d08ff 	.word	0x003d08ff
 80025a0:	431bde83 	.word	0x431bde83
 80025a4:	10624dd3 	.word	0x10624dd3

080025a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c2:	f7ff f8bd 	bl	8001740 <HAL_GetTick>
 80025c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	f040 80d9 	bne.w	8002788 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2319      	movs	r3, #25
 80025dc:	2201      	movs	r2, #1
 80025de:	496d      	ldr	r1, [pc, #436]	; (8002794 <HAL_I2C_Mem_Write+0x1ec>)
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fc99 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
 80025ee:	e0cc      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Mem_Write+0x56>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e0c5      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d007      	beq.n	8002624 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002632:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2221      	movs	r2, #33	; 0x21
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2240      	movs	r2, #64	; 0x40
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a4d      	ldr	r2, [pc, #308]	; (8002798 <HAL_I2C_Mem_Write+0x1f0>)
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002666:	88f8      	ldrh	r0, [r7, #6]
 8002668:	893a      	ldrh	r2, [r7, #8]
 800266a:	8979      	ldrh	r1, [r7, #10]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	4603      	mov	r3, r0
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fad0 	bl	8002c1c <I2C_RequestMemoryWrite>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d052      	beq.n	8002728 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e081      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fd1a 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00d      	beq.n	80026b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b04      	cmp	r3, #4
 800269c:	d107      	bne.n	80026ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06b      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d11b      	bne.n	8002728 <HAL_I2C_Mem_Write+0x180>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d017      	beq.n	8002728 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1aa      	bne.n	8002686 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fd06 	bl	8003146 <I2C_WaitOnBTFFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00d      	beq.n	800275c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	2b04      	cmp	r3, #4
 8002746:	d107      	bne.n	8002758 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002756:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e016      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	00100002 	.word	0x00100002
 8002798:	ffff0000 	.word	0xffff0000

0800279c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	; 0x30
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	817b      	strh	r3, [r7, #10]
 80027ae:	460b      	mov	r3, r1
 80027b0:	813b      	strh	r3, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b6:	f7fe ffc3 	bl	8001740 <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	f040 8208 	bne.w	8002bda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2319      	movs	r3, #25
 80027d0:	2201      	movs	r2, #1
 80027d2:	497b      	ldr	r1, [pc, #492]	; (80029c0 <HAL_I2C_Mem_Read+0x224>)
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fb9f 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
 80027e2:	e1fb      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Mem_Read+0x56>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e1f4      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d007      	beq.n	8002818 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002826:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2222      	movs	r2, #34	; 0x22
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a5b      	ldr	r2, [pc, #364]	; (80029c4 <HAL_I2C_Mem_Read+0x228>)
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800285a:	88f8      	ldrh	r0, [r7, #6]
 800285c:	893a      	ldrh	r2, [r7, #8]
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4603      	mov	r3, r0
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fa6c 	bl	8002d48 <I2C_RequestMemoryRead>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1b0      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	623b      	str	r3, [r7, #32]
 8002896:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e184      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d11b      	bne.n	80028ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e164      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d11b      	bne.n	800292a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002900:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	e144      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002940:	e138      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	2b03      	cmp	r3, #3
 8002948:	f200 80f1 	bhi.w	8002b2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b01      	cmp	r3, #1
 8002952:	d123      	bne.n	800299c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002956:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fc35 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e139      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	855a      	strh	r2, [r3, #42]	; 0x2a
 800299a:	e10b      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d14e      	bne.n	8002a42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029aa:	2200      	movs	r2, #0
 80029ac:	4906      	ldr	r1, [pc, #24]	; (80029c8 <HAL_I2C_Mem_Read+0x22c>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fab2 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e10e      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
 80029be:	bf00      	nop
 80029c0:	00100002 	.word	0x00100002
 80029c4:	ffff0000 	.word	0xffff0000
 80029c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a40:	e0b8      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4966      	ldr	r1, [pc, #408]	; (8002be4 <HAL_I2C_Mem_Read+0x448>)
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fa63 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0bf      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	494f      	ldr	r1, [pc, #316]	; (8002be4 <HAL_I2C_Mem_Read+0x448>)
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fa35 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e091      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b2c:	e042      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fb48 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e04c      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d118      	bne.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f aec2 	bne.w	8002942 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3728      	adds	r7, #40	; 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	00010004 	.word	0x00010004

08002be8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	817b      	strh	r3, [r7, #10]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	813b      	strh	r3, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f960 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6c:	d103      	bne.n	8002c76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e05f      	b.n	8002d3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c7a:	897b      	ldrh	r3, [r7, #10]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	492d      	ldr	r1, [pc, #180]	; (8002d44 <I2C_RequestMemoryWrite+0x128>)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f998 	bl	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04c      	b.n	8002d3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	6a39      	ldr	r1, [r7, #32]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fa02 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d107      	bne.n	8002cde <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e02b      	b.n	8002d3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce8:	893b      	ldrh	r3, [r7, #8]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	e021      	b.n	8002d38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf4:	893b      	ldrh	r3, [r7, #8]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	6a39      	ldr	r1, [r7, #32]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f9dc 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d107      	bne.n	8002d2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e005      	b.n	8002d3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2e:	893b      	ldrh	r3, [r7, #8]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	00010002 	.word	0x00010002

08002d48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	813b      	strh	r3, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8c2 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da8:	d103      	bne.n	8002db2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0aa      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	6a3a      	ldr	r2, [r7, #32]
 8002dca:	4952      	ldr	r1, [pc, #328]	; (8002f14 <I2C_RequestMemoryRead+0x1cc>)
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f8fa 	bl	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e097      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df4:	6a39      	ldr	r1, [r7, #32]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f964 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d107      	bne.n	8002e1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e076      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e24:	893b      	ldrh	r3, [r7, #8]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]
 8002e2e:	e021      	b.n	8002e74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	6a39      	ldr	r1, [r7, #32]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f93e 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d107      	bne.n	8002e66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e050      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6a:	893b      	ldrh	r3, [r7, #8]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e76:	6a39      	ldr	r1, [r7, #32]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f923 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d107      	bne.n	8002e9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e035      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f82b 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed6:	d103      	bne.n	8002ee0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e013      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	4906      	ldr	r1, [pc, #24]	; (8002f14 <I2C_RequestMemoryRead+0x1cc>)
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f863 	bl	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	00010002 	.word	0x00010002

08002f18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f28:	e025      	b.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d021      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe fc05 	bl	8001740 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d116      	bne.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e023      	b.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10d      	bne.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	e00c      	b.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d0b6      	beq.n	8002f2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd4:	e051      	b.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe4:	d123      	bne.n	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ffe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e046      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d021      	beq.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe fb83 	bl	8001740 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d116      	bne.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e020      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10c      	bne.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	e00b      	b.n	80030b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	43da      	mvns	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4013      	ands	r3, r2
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d18d      	bne.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d0:	e02d      	b.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f8ce 	bl	8003274 <I2C_IsAcknowledgeFailed>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e02d      	b.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d021      	beq.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fb29 	bl	8001740 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e007      	b.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d1ca      	bne.n	80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003152:	e02d      	b.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f88d 	bl	8003274 <I2C_IsAcknowledgeFailed>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e02d      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d021      	beq.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316c:	f7fe fae8 	bl	8001740 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d1ca      	bne.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031d4:	e042      	b.n	800325c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d119      	bne.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0210 	mvn.w	r2, #16
 80031ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e029      	b.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003218:	f7fe fa92 	bl	8001740 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d1b5      	bne.n	80031d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328a:	d11b      	bne.n	80032c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003294:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d129      	bne.n	800333c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0210 	bic.w	r2, r2, #16
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b20      	cmp	r3, #32
 8003362:	d12a      	bne.n	80033ba <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003384:	89fb      	ldrh	r3, [r7, #14]
 8003386:	f023 030f 	bic.w	r3, r3, #15
 800338a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b29a      	uxth	r2, r3
 8003390:	89fb      	ldrh	r3, [r7, #14]
 8003392:	4313      	orrs	r3, r2
 8003394:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	89fa      	ldrh	r2, [r7, #14]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
  }
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ca:	b08f      	sub	sp, #60	; 0x3c
 80033cc:	af0a      	add	r7, sp, #40	; 0x28
 80033ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e10f      	b.n	80035fa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fe f847 	bl	8001488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f001 f9ae 	bl	800477a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	687e      	ldr	r6, [r7, #4]
 8003426:	466d      	mov	r5, sp
 8003428:	f106 0410 	add.w	r4, r6, #16
 800342c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800342e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003434:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003438:	e885 0003 	stmia.w	r5, {r0, r1}
 800343c:	1d33      	adds	r3, r6, #4
 800343e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003440:	6838      	ldr	r0, [r7, #0]
 8003442:	f001 f939 	bl	80046b8 <USB_CoreInit>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0d0      	b.n	80035fa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f001 f99c 	bl	800479c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e04a      	b.n	8003500 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	333d      	adds	r3, #61	; 0x3d
 800347a:	2201      	movs	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	333c      	adds	r3, #60	; 0x3c
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	b298      	uxth	r0, r3
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	3344      	adds	r3, #68	; 0x44
 80034a6:	4602      	mov	r2, r0
 80034a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3340      	adds	r3, #64	; 0x40
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	3348      	adds	r3, #72	; 0x48
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	334c      	adds	r3, #76	; 0x4c
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3354      	adds	r3, #84	; 0x54
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	3301      	adds	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d3af      	bcc.n	800346a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	e044      	b.n	800359a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	3301      	adds	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d3b5      	bcc.n	8003510 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	687e      	ldr	r6, [r7, #4]
 80035ac:	466d      	mov	r5, sp
 80035ae:	f106 0410 	add.w	r4, r6, #16
 80035b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035be:	e885 0003 	stmia.w	r5, {r0, r1}
 80035c2:	1d33      	adds	r3, r6, #4
 80035c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	f001 f934 	bl	8004834 <USB_DevInit>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e00d      	b.n	80035fa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 faff 	bl	8004bf6 <USB_DevDisconnect>

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003604 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e267      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d075      	beq.n	800370e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003622:	4b88      	ldr	r3, [pc, #544]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b04      	cmp	r3, #4
 800362c:	d00c      	beq.n	8003648 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362e:	4b85      	ldr	r3, [pc, #532]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d112      	bne.n	8003660 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363a:	4b82      	ldr	r3, [pc, #520]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003646:	d10b      	bne.n	8003660 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	4b7e      	ldr	r3, [pc, #504]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d05b      	beq.n	800370c <HAL_RCC_OscConfig+0x108>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d157      	bne.n	800370c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e242      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d106      	bne.n	8003678 <HAL_RCC_OscConfig+0x74>
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a75      	ldr	r2, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e01d      	b.n	80036b4 <HAL_RCC_OscConfig+0xb0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x98>
 8003682:	4b70      	ldr	r3, [pc, #448]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6f      	ldr	r2, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6c      	ldr	r2, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0xb0>
 800369c:	4b69      	ldr	r3, [pc, #420]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a68      	ldr	r2, [pc, #416]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b66      	ldr	r3, [pc, #408]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a65      	ldr	r2, [pc, #404]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80036ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fe f840 	bl	8001740 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe f83c 	bl	8001740 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e207      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b5b      	ldr	r3, [pc, #364]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0xc0>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe f82c 	bl	8001740 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe f828 	bl	8001740 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e1f3      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	4b51      	ldr	r3, [pc, #324]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0xe8>
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d063      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800372e:	2b08      	cmp	r3, #8
 8003730:	d11c      	bne.n	800376c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003732:	4b44      	ldr	r3, [pc, #272]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d116      	bne.n	800376c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_RCC_OscConfig+0x152>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e1c7      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003756:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4937      	ldr	r1, [pc, #220]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	e03a      	b.n	80037e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d020      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003774:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_RCC_OscConfig+0x244>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fd ffe1 	bl	8001740 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003782:	f7fd ffdd 	bl	8001740 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e1a8      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a0:	4b28      	ldr	r3, [pc, #160]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4925      	ldr	r1, [pc, #148]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
 80037b4:	e015      	b.n	80037e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCC_OscConfig+0x244>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd ffc0 	bl	8001740 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c4:	f7fd ffbc 	bl	8001740 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e187      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d036      	beq.n	800385c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_RCC_OscConfig+0x248>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fc:	f7fd ffa0 	bl	8001740 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003804:	f7fd ff9c 	bl	8001740 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e167      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x200>
 8003822:	e01b      	b.n	800385c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_OscConfig+0x248>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382a:	f7fd ff89 	bl	8001740 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	e00e      	b.n	8003850 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003832:	f7fd ff85 	bl	8001740 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d907      	bls.n	8003850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e150      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
 8003844:	40023800 	.word	0x40023800
 8003848:	42470000 	.word	0x42470000
 800384c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	4b88      	ldr	r3, [pc, #544]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ea      	bne.n	8003832 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8097 	beq.w	8003998 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386e:	4b81      	ldr	r3, [pc, #516]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	4b7d      	ldr	r3, [pc, #500]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a7c      	ldr	r2, [pc, #496]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b7a      	ldr	r3, [pc, #488]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	4b77      	ldr	r3, [pc, #476]	; (8003a78 <HAL_RCC_OscConfig+0x474>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d118      	bne.n	80038d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a6:	4b74      	ldr	r3, [pc, #464]	; (8003a78 <HAL_RCC_OscConfig+0x474>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a73      	ldr	r2, [pc, #460]	; (8003a78 <HAL_RCC_OscConfig+0x474>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b2:	f7fd ff45 	bl	8001740 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ba:	f7fd ff41 	bl	8001740 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e10c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038cc:	4b6a      	ldr	r3, [pc, #424]	; (8003a78 <HAL_RCC_OscConfig+0x474>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d106      	bne.n	80038ee <HAL_RCC_OscConfig+0x2ea>
 80038e0:	4b64      	ldr	r3, [pc, #400]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4a63      	ldr	r2, [pc, #396]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6713      	str	r3, [r2, #112]	; 0x70
 80038ec:	e01c      	b.n	8003928 <HAL_RCC_OscConfig+0x324>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x30c>
 80038f6:	4b5f      	ldr	r3, [pc, #380]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a5e      	ldr	r2, [pc, #376]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	4b5c      	ldr	r3, [pc, #368]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a5b      	ldr	r2, [pc, #364]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0x324>
 8003910:	4b58      	ldr	r3, [pc, #352]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a57      	ldr	r2, [pc, #348]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
 800391c:	4b55      	ldr	r3, [pc, #340]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	4a54      	ldr	r2, [pc, #336]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003922:	f023 0304 	bic.w	r3, r3, #4
 8003926:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd ff06 	bl	8001740 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fd ff02 	bl	8001740 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0cb      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	4b49      	ldr	r3, [pc, #292]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ee      	beq.n	8003938 <HAL_RCC_OscConfig+0x334>
 800395a:	e014      	b.n	8003986 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395c:	f7fd fef0 	bl	8001740 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003962:	e00a      	b.n	800397a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	f7fd feec 	bl	8001740 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0b5      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397a:	4b3e      	ldr	r3, [pc, #248]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1ee      	bne.n	8003964 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398c:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	4a38      	ldr	r2, [pc, #224]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003996:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a1 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039a2:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d05c      	beq.n	8003a68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d141      	bne.n	8003a3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_RCC_OscConfig+0x478>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fd fec0 	bl	8001740 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fd febc 	bl	8001740 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e087      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	3b01      	subs	r3, #1
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	491b      	ldr	r1, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <HAL_RCC_OscConfig+0x478>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a12:	f7fd fe95 	bl	8001740 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7fd fe91 	bl	8001740 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e05c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x416>
 8003a38:	e054      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_RCC_OscConfig+0x478>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fd fe7e 	bl	8001740 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fd fe7a 	bl	8001740 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e045      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x444>
 8003a66:	e03d      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e038      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_RCC_OscConfig+0x4ec>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d028      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d121      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d11a      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ab6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800

08003af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0cc      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b68      	ldr	r3, [pc, #416]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d90c      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b65      	ldr	r3, [pc, #404]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a52      	ldr	r2, [pc, #328]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d044      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d119      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e06f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e067      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f023 0203 	bic.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4934      	ldr	r1, [pc, #208]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fd fdac 	bl	8001740 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fd fda8 	bl	8001740 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e04f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 020c 	and.w	r2, r3, #12
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d1eb      	bne.n	8003bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d20c      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b22      	ldr	r3, [pc, #136]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	490a      	ldr	r1, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	5ccb      	ldrb	r3, [r1, r3]
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd fd0c 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023c00 	.word	0x40023c00
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	08005664 	.word	0x08005664
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	20000004 	.word	0x20000004

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc4:	b094      	sub	sp, #80	; 0x50
 8003cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	647b      	str	r3, [r7, #68]	; 0x44
 8003ccc:	2300      	movs	r3, #0
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd8:	4b79      	ldr	r3, [pc, #484]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d00d      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x40>
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	f200 80e1 	bhi.w	8003eac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003cf2:	e0db      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4b73      	ldr	r3, [pc, #460]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cf6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cf8:	e0db      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cfa:	4b73      	ldr	r3, [pc, #460]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cfe:	e0d8      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d00:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d0a:	4b6d      	ldr	r3, [pc, #436]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d063      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	099b      	lsrs	r3, r3, #6
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d32:	4622      	mov	r2, r4
 8003d34:	462b      	mov	r3, r5
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	0159      	lsls	r1, r3, #5
 8003d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d44:	0150      	lsls	r0, r2, #5
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	1a51      	subs	r1, r2, r1
 8003d4e:	6139      	str	r1, [r7, #16]
 8003d50:	4629      	mov	r1, r5
 8003d52:	eb63 0301 	sbc.w	r3, r3, r1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d64:	4659      	mov	r1, fp
 8003d66:	018b      	lsls	r3, r1, #6
 8003d68:	4651      	mov	r1, sl
 8003d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6e:	4651      	mov	r1, sl
 8003d70:	018a      	lsls	r2, r1, #6
 8003d72:	4651      	mov	r1, sl
 8003d74:	ebb2 0801 	subs.w	r8, r2, r1
 8003d78:	4659      	mov	r1, fp
 8003d7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d92:	4690      	mov	r8, r2
 8003d94:	4699      	mov	r9, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	eb18 0303 	adds.w	r3, r8, r3
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	462b      	mov	r3, r5
 8003da0:	eb49 0303 	adc.w	r3, r9, r3
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003db2:	4629      	mov	r1, r5
 8003db4:	024b      	lsls	r3, r1, #9
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	024a      	lsls	r2, r1, #9
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dd0:	f7fc fc72 	bl	80006b8 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ddc:	e058      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dde:	4b38      	ldr	r3, [pc, #224]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	099b      	lsrs	r3, r3, #6
 8003de4:	2200      	movs	r2, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	4611      	mov	r1, r2
 8003dea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	f04f 0000 	mov.w	r0, #0
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	0159      	lsls	r1, r3, #5
 8003e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e0a:	0150      	lsls	r0, r2, #5
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4641      	mov	r1, r8
 8003e12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e30:	ebb2 040a 	subs.w	r4, r2, sl
 8003e34:	eb63 050b 	sbc.w	r5, r3, fp
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	00eb      	lsls	r3, r5, #3
 8003e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e46:	00e2      	lsls	r2, r4, #3
 8003e48:	4614      	mov	r4, r2
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	4643      	mov	r3, r8
 8003e4e:	18e3      	adds	r3, r4, r3
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	464b      	mov	r3, r9
 8003e54:	eb45 0303 	adc.w	r3, r5, r3
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e66:	4629      	mov	r1, r5
 8003e68:	028b      	lsls	r3, r1, #10
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e70:	4621      	mov	r1, r4
 8003e72:	028a      	lsls	r2, r1, #10
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	61fa      	str	r2, [r7, #28]
 8003e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e84:	f7fc fc18 	bl	80006b8 <__aeabi_uldivmod>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	0c1b      	lsrs	r3, r3, #16
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3750      	adds	r7, #80	; 0x50
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	007a1200 	.word	0x007a1200

08003ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000000 	.word	0x20000000

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee8:	f7ff fff0 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0a9b      	lsrs	r3, r3, #10
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	08005674 	.word	0x08005674

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f10:	f7ff ffdc 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0b5b      	lsrs	r3, r3, #13
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	08005674 	.word	0x08005674

08003f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e03f      	b.n	8003fc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd fa4c 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f929 	bl	80041d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b08a      	sub	sp, #40	; 0x28
 8003fd2:	af02      	add	r7, sp, #8
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d17c      	bne.n	80040e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_UART_Transmit+0x2c>
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e075      	b.n	80040ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_UART_Transmit+0x3e>
 8004008:	2302      	movs	r3, #2
 800400a:	e06e      	b.n	80040ea <HAL_UART_Transmit+0x11c>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2221      	movs	r2, #33	; 0x21
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004022:	f7fd fb8d 	bl	8001740 <HAL_GetTick>
 8004026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403c:	d108      	bne.n	8004050 <HAL_UART_Transmit+0x82>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d104      	bne.n	8004050 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	e003      	b.n	8004058 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004060:	e02a      	b.n	80040b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	2180      	movs	r1, #128	; 0x80
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f840 	bl	80040f2 <UART_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e036      	b.n	80040ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004090:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3302      	adds	r3, #2
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e007      	b.n	80040aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	781a      	ldrb	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1cf      	bne.n	8004062 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2140      	movs	r1, #64	; 0x40
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f810 	bl	80040f2 <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e006      	b.n	80040ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e000      	b.n	80040ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b090      	sub	sp, #64	; 0x40
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004102:	e050      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d04c      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800410c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0x30>
 8004112:	f7fd fb15 	bl	8001740 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800411e:	429a      	cmp	r2, r3
 8004120:	d241      	bcs.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004142:	637a      	str	r2, [r7, #52]	; 0x34
 8004144:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e5      	bne.n	8004122 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3314      	adds	r3, #20
 800415c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	613b      	str	r3, [r7, #16]
   return(result);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004176:	623a      	str	r2, [r7, #32]
 8004178:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	69f9      	ldr	r1, [r7, #28]
 800417c:	6a3a      	ldr	r2, [r7, #32]
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	61bb      	str	r3, [r7, #24]
   return(result);
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e00f      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	bf0c      	ite	eq
 80041b6:	2301      	moveq	r3, #1
 80041b8:	2300      	movne	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d09f      	beq.n	8004104 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3740      	adds	r7, #64	; 0x40
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d4:	b0c0      	sub	sp, #256	; 0x100
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	ea40 0301 	orr.w	r3, r0, r1
 80041f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	431a      	orrs	r2, r3
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	431a      	orrs	r2, r3
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004228:	f021 010c 	bic.w	r1, r1, #12
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004236:	430b      	orrs	r3, r1
 8004238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424a:	6999      	ldr	r1, [r3, #24]
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	ea40 0301 	orr.w	r3, r0, r1
 8004256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b8f      	ldr	r3, [pc, #572]	; (800449c <UART_SetConfig+0x2cc>)
 8004260:	429a      	cmp	r2, r3
 8004262:	d005      	beq.n	8004270 <UART_SetConfig+0xa0>
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b8d      	ldr	r3, [pc, #564]	; (80044a0 <UART_SetConfig+0x2d0>)
 800426c:	429a      	cmp	r2, r3
 800426e:	d104      	bne.n	800427a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004270:	f7ff fe4c 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8004274:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004278:	e003      	b.n	8004282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800427a:	f7ff fe33 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 800427e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428c:	f040 810c 	bne.w	80044a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004294:	2200      	movs	r2, #0
 8004296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800429a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800429e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	1891      	adds	r1, r2, r2
 80042a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80042aa:	415b      	adcs	r3, r3
 80042ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042b2:	4621      	mov	r1, r4
 80042b4:	eb12 0801 	adds.w	r8, r2, r1
 80042b8:	4629      	mov	r1, r5
 80042ba:	eb43 0901 	adc.w	r9, r3, r1
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042d2:	4690      	mov	r8, r2
 80042d4:	4699      	mov	r9, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	eb18 0303 	adds.w	r3, r8, r3
 80042dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042e0:	462b      	mov	r3, r5
 80042e2:	eb49 0303 	adc.w	r3, r9, r3
 80042e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042fe:	460b      	mov	r3, r1
 8004300:	18db      	adds	r3, r3, r3
 8004302:	653b      	str	r3, [r7, #80]	; 0x50
 8004304:	4613      	mov	r3, r2
 8004306:	eb42 0303 	adc.w	r3, r2, r3
 800430a:	657b      	str	r3, [r7, #84]	; 0x54
 800430c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004314:	f7fc f9d0 	bl	80006b8 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4b61      	ldr	r3, [pc, #388]	; (80044a4 <UART_SetConfig+0x2d4>)
 800431e:	fba3 2302 	umull	r2, r3, r3, r2
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	011c      	lsls	r4, r3, #4
 8004326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800432a:	2200      	movs	r2, #0
 800432c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004330:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	1891      	adds	r1, r2, r2
 800433e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004340:	415b      	adcs	r3, r3
 8004342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004348:	4641      	mov	r1, r8
 800434a:	eb12 0a01 	adds.w	sl, r2, r1
 800434e:	4649      	mov	r1, r9
 8004350:	eb43 0b01 	adc.w	fp, r3, r1
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004368:	4692      	mov	sl, r2
 800436a:	469b      	mov	fp, r3
 800436c:	4643      	mov	r3, r8
 800436e:	eb1a 0303 	adds.w	r3, sl, r3
 8004372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004376:	464b      	mov	r3, r9
 8004378:	eb4b 0303 	adc.w	r3, fp, r3
 800437c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800438c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004394:	460b      	mov	r3, r1
 8004396:	18db      	adds	r3, r3, r3
 8004398:	643b      	str	r3, [r7, #64]	; 0x40
 800439a:	4613      	mov	r3, r2
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	647b      	str	r3, [r7, #68]	; 0x44
 80043a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043aa:	f7fc f985 	bl	80006b8 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <UART_SetConfig+0x2d4>)
 80043b6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2264      	movs	r2, #100	; 0x64
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	1acb      	subs	r3, r1, r3
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043ca:	4b36      	ldr	r3, [pc, #216]	; (80044a4 <UART_SetConfig+0x2d4>)
 80043cc:	fba3 2302 	umull	r2, r3, r3, r2
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043d8:	441c      	add	r4, r3
 80043da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043ec:	4642      	mov	r2, r8
 80043ee:	464b      	mov	r3, r9
 80043f0:	1891      	adds	r1, r2, r2
 80043f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80043f4:	415b      	adcs	r3, r3
 80043f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043fc:	4641      	mov	r1, r8
 80043fe:	1851      	adds	r1, r2, r1
 8004400:	6339      	str	r1, [r7, #48]	; 0x30
 8004402:	4649      	mov	r1, r9
 8004404:	414b      	adcs	r3, r1
 8004406:	637b      	str	r3, [r7, #52]	; 0x34
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004414:	4659      	mov	r1, fp
 8004416:	00cb      	lsls	r3, r1, #3
 8004418:	4651      	mov	r1, sl
 800441a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800441e:	4651      	mov	r1, sl
 8004420:	00ca      	lsls	r2, r1, #3
 8004422:	4610      	mov	r0, r2
 8004424:	4619      	mov	r1, r3
 8004426:	4603      	mov	r3, r0
 8004428:	4642      	mov	r2, r8
 800442a:	189b      	adds	r3, r3, r2
 800442c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004430:	464b      	mov	r3, r9
 8004432:	460a      	mov	r2, r1
 8004434:	eb42 0303 	adc.w	r3, r2, r3
 8004438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004448:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800444c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004450:	460b      	mov	r3, r1
 8004452:	18db      	adds	r3, r3, r3
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
 8004456:	4613      	mov	r3, r2
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004466:	f7fc f927 	bl	80006b8 <__aeabi_uldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <UART_SetConfig+0x2d4>)
 8004470:	fba3 1302 	umull	r1, r3, r3, r2
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	2164      	movs	r1, #100	; 0x64
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	3332      	adds	r3, #50	; 0x32
 8004482:	4a08      	ldr	r2, [pc, #32]	; (80044a4 <UART_SetConfig+0x2d4>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	f003 0207 	and.w	r2, r3, #7
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4422      	add	r2, r4
 8004496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004498:	e105      	b.n	80046a6 <UART_SetConfig+0x4d6>
 800449a:	bf00      	nop
 800449c:	40011000 	.word	0x40011000
 80044a0:	40011400 	.word	0x40011400
 80044a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044ba:	4642      	mov	r2, r8
 80044bc:	464b      	mov	r3, r9
 80044be:	1891      	adds	r1, r2, r2
 80044c0:	6239      	str	r1, [r7, #32]
 80044c2:	415b      	adcs	r3, r3
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
 80044c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ca:	4641      	mov	r1, r8
 80044cc:	1854      	adds	r4, r2, r1
 80044ce:	4649      	mov	r1, r9
 80044d0:	eb43 0501 	adc.w	r5, r3, r1
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	00eb      	lsls	r3, r5, #3
 80044de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044e2:	00e2      	lsls	r2, r4, #3
 80044e4:	4614      	mov	r4, r2
 80044e6:	461d      	mov	r5, r3
 80044e8:	4643      	mov	r3, r8
 80044ea:	18e3      	adds	r3, r4, r3
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044f0:	464b      	mov	r3, r9
 80044f2:	eb45 0303 	adc.w	r3, r5, r3
 80044f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004516:	4629      	mov	r1, r5
 8004518:	008b      	lsls	r3, r1, #2
 800451a:	4621      	mov	r1, r4
 800451c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004520:	4621      	mov	r1, r4
 8004522:	008a      	lsls	r2, r1, #2
 8004524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004528:	f7fc f8c6 	bl	80006b8 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4b60      	ldr	r3, [pc, #384]	; (80046b4 <UART_SetConfig+0x4e4>)
 8004532:	fba3 2302 	umull	r2, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	011c      	lsls	r4, r3, #4
 800453a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004544:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800454c:	4642      	mov	r2, r8
 800454e:	464b      	mov	r3, r9
 8004550:	1891      	adds	r1, r2, r2
 8004552:	61b9      	str	r1, [r7, #24]
 8004554:	415b      	adcs	r3, r3
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800455c:	4641      	mov	r1, r8
 800455e:	1851      	adds	r1, r2, r1
 8004560:	6139      	str	r1, [r7, #16]
 8004562:	4649      	mov	r1, r9
 8004564:	414b      	adcs	r3, r1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004574:	4659      	mov	r1, fp
 8004576:	00cb      	lsls	r3, r1, #3
 8004578:	4651      	mov	r1, sl
 800457a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800457e:	4651      	mov	r1, sl
 8004580:	00ca      	lsls	r2, r1, #3
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	4603      	mov	r3, r0
 8004588:	4642      	mov	r2, r8
 800458a:	189b      	adds	r3, r3, r2
 800458c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004590:	464b      	mov	r3, r9
 8004592:	460a      	mov	r2, r1
 8004594:	eb42 0303 	adc.w	r3, r2, r3
 8004598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80045a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045b4:	4649      	mov	r1, r9
 80045b6:	008b      	lsls	r3, r1, #2
 80045b8:	4641      	mov	r1, r8
 80045ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045be:	4641      	mov	r1, r8
 80045c0:	008a      	lsls	r2, r1, #2
 80045c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045c6:	f7fc f877 	bl	80006b8 <__aeabi_uldivmod>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <UART_SetConfig+0x4e4>)
 80045d0:	fba3 1302 	umull	r1, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	2164      	movs	r1, #100	; 0x64
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	3332      	adds	r3, #50	; 0x32
 80045e2:	4a34      	ldr	r2, [pc, #208]	; (80046b4 <UART_SetConfig+0x4e4>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ee:	441c      	add	r4, r3
 80045f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f4:	2200      	movs	r2, #0
 80045f6:	673b      	str	r3, [r7, #112]	; 0x70
 80045f8:	677a      	str	r2, [r7, #116]	; 0x74
 80045fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045fe:	4642      	mov	r2, r8
 8004600:	464b      	mov	r3, r9
 8004602:	1891      	adds	r1, r2, r2
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	415b      	adcs	r3, r3
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800460e:	4641      	mov	r1, r8
 8004610:	1851      	adds	r1, r2, r1
 8004612:	6039      	str	r1, [r7, #0]
 8004614:	4649      	mov	r1, r9
 8004616:	414b      	adcs	r3, r1
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004626:	4659      	mov	r1, fp
 8004628:	00cb      	lsls	r3, r1, #3
 800462a:	4651      	mov	r1, sl
 800462c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004630:	4651      	mov	r1, sl
 8004632:	00ca      	lsls	r2, r1, #3
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	4603      	mov	r3, r0
 800463a:	4642      	mov	r2, r8
 800463c:	189b      	adds	r3, r3, r2
 800463e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004640:	464b      	mov	r3, r9
 8004642:	460a      	mov	r2, r1
 8004644:	eb42 0303 	adc.w	r3, r2, r3
 8004648:	66fb      	str	r3, [r7, #108]	; 0x6c
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	663b      	str	r3, [r7, #96]	; 0x60
 8004654:	667a      	str	r2, [r7, #100]	; 0x64
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004662:	4649      	mov	r1, r9
 8004664:	008b      	lsls	r3, r1, #2
 8004666:	4641      	mov	r1, r8
 8004668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800466c:	4641      	mov	r1, r8
 800466e:	008a      	lsls	r2, r1, #2
 8004670:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004674:	f7fc f820 	bl	80006b8 <__aeabi_uldivmod>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <UART_SetConfig+0x4e4>)
 800467e:	fba3 1302 	umull	r1, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2164      	movs	r1, #100	; 0x64
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	3332      	adds	r3, #50	; 0x32
 8004690:	4a08      	ldr	r2, [pc, #32]	; (80046b4 <UART_SetConfig+0x4e4>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4422      	add	r2, r4
 80046a4:	609a      	str	r2, [r3, #8]
}
 80046a6:	bf00      	nop
 80046a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046ac:	46bd      	mov	sp, r7
 80046ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b2:	bf00      	nop
 80046b4:	51eb851f 	.word	0x51eb851f

080046b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046b8:	b084      	sub	sp, #16
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	f107 001c 	add.w	r0, r7, #28
 80046c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d122      	bne.n	8004716 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 faa2 	bl	8004c54 <USB_CoreReset>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e01a      	b.n	800474c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fa96 	bl	8004c54 <USB_CoreReset>
 8004728:	4603      	mov	r3, r0
 800472a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
 800473e:	e005      	b.n	800474c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10b      	bne.n	800476a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f043 0206 	orr.w	r2, r3, #6
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f043 0220 	orr.w	r2, r3, #32
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004776:	b004      	add	sp, #16
 8004778:	4770      	bx	lr

0800477a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f023 0201 	bic.w	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d115      	bne.n	80047ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047ca:	2001      	movs	r0, #1
 80047cc:	f7fc ffc4 	bl	8001758 <HAL_Delay>
      ms++;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa2e 	bl	8004c38 <USB_GetMode>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d01e      	beq.n	8004820 <USB_SetCurrentMode+0x84>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b31      	cmp	r3, #49	; 0x31
 80047e6:	d9f0      	bls.n	80047ca <USB_SetCurrentMode+0x2e>
 80047e8:	e01a      	b.n	8004820 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d115      	bne.n	800481c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047fc:	2001      	movs	r0, #1
 80047fe:	f7fc ffab 	bl	8001758 <HAL_Delay>
      ms++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3301      	adds	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fa15 	bl	8004c38 <USB_GetMode>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <USB_SetCurrentMode+0x84>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b31      	cmp	r3, #49	; 0x31
 8004818:	d9f0      	bls.n	80047fc <USB_SetCurrentMode+0x60>
 800481a:	e001      	b.n	8004820 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e005      	b.n	800482c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b32      	cmp	r3, #50	; 0x32
 8004824:	d101      	bne.n	800482a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004834:	b084      	sub	sp, #16
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e009      	b.n	8004868 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	3340      	adds	r3, #64	; 0x40
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	2200      	movs	r2, #0
 8004860:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	3301      	adds	r3, #1
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b0e      	cmp	r3, #14
 800486c:	d9f2      	bls.n	8004854 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800486e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d11c      	bne.n	80048ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004882:	f043 0302 	orr.w	r3, r3, #2
 8004886:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
 80048ac:	e00b      	b.n	80048c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048cc:	461a      	mov	r2, r3
 80048ce:	2300      	movs	r3, #0
 80048d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d8:	4619      	mov	r1, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e0:	461a      	mov	r2, r3
 80048e2:	680b      	ldr	r3, [r1, #0]
 80048e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10c      	bne.n	8004906 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048f2:	2100      	movs	r1, #0
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f965 	bl	8004bc4 <USB_SetDevSpeed>
 80048fa:	e008      	b.n	800490e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048fc:	2101      	movs	r1, #1
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f960 	bl	8004bc4 <USB_SetDevSpeed>
 8004904:	e003      	b.n	800490e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004906:	2103      	movs	r1, #3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f95b 	bl	8004bc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800490e:	2110      	movs	r1, #16
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8f3 	bl	8004afc <USB_FlushTxFifo>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f91f 	bl	8004b64 <USB_FlushRxFifo>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004936:	461a      	mov	r2, r3
 8004938:	2300      	movs	r3, #0
 800493a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	461a      	mov	r2, r3
 8004944:	2300      	movs	r3, #0
 8004946:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	461a      	mov	r2, r3
 8004950:	2300      	movs	r3, #0
 8004952:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004954:	2300      	movs	r3, #0
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	e043      	b.n	80049e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800496c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004970:	d118      	bne.n	80049a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	e013      	b.n	80049b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499a:	461a      	mov	r2, r3
 800499c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e008      	b.n	80049b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	461a      	mov	r2, r3
 80049b2:	2300      	movs	r3, #0
 80049b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	461a      	mov	r2, r3
 80049c4:	2300      	movs	r3, #0
 80049c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	461a      	mov	r2, r3
 80049d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	3301      	adds	r3, #1
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3b7      	bcc.n	800495a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	e043      	b.n	8004a78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a06:	d118      	bne.n	8004a3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e013      	b.n	8004a4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	461a      	mov	r2, r3
 8004a32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	e008      	b.n	8004a4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a46:	461a      	mov	r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3301      	adds	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d3b7      	bcc.n	80049f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f043 0210 	orr.w	r2, r3, #16
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699a      	ldr	r2, [r3, #24]
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <USB_DevInit+0x2c4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f043 0208 	orr.w	r2, r3, #8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ae0:	f043 0304 	orr.w	r3, r3, #4
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004af4:	b004      	add	sp, #16
 8004af6:	4770      	bx	lr
 8004af8:	803c3800 	.word	0x803c3800

08004afc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <USB_FlushTxFifo+0x64>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e01b      	b.n	8004b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	daf2      	bge.n	8004b0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	019b      	lsls	r3, r3, #6
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <USB_FlushTxFifo+0x64>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e006      	b.n	8004b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d0f0      	beq.n	8004b34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	00030d40 	.word	0x00030d40

08004b64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3301      	adds	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a11      	ldr	r2, [pc, #68]	; (8004bc0 <USB_FlushRxFifo+0x5c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e018      	b.n	8004bb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	daf2      	bge.n	8004b70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2210      	movs	r2, #16
 8004b92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <USB_FlushRxFifo+0x5c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d901      	bls.n	8004ba6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e006      	b.n	8004bb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d0f0      	beq.n	8004b94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	00030d40 	.word	0x00030d40

08004bc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c10:	f023 0303 	bic.w	r3, r3, #3
 8004c14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0301 	and.w	r3, r3, #1
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <USB_CoreReset+0x64>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e01b      	b.n	8004caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	daf2      	bge.n	8004c60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f043 0201 	orr.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <USB_CoreReset+0x64>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e006      	b.n	8004caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d0f0      	beq.n	8004c8a <USB_CoreReset+0x36>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	00030d40 	.word	0x00030d40

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	; (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	; (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	; (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f000 fc8e 	bl	80055fc <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	080056b8 	.word	0x080056b8
 8004d04:	080056b8 	.word	0x080056b8
 8004d08:	080056b8 	.word	0x080056b8
 8004d0c:	080056bc 	.word	0x080056bc

08004d10 <memset>:
 8004d10:	4402      	add	r2, r0
 8004d12:	4603      	mov	r3, r0
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d100      	bne.n	8004d1a <memset+0xa>
 8004d18:	4770      	bx	lr
 8004d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1e:	e7f9      	b.n	8004d14 <memset+0x4>

08004d20 <siprintf>:
 8004d20:	b40e      	push	{r1, r2, r3}
 8004d22:	b500      	push	{lr}
 8004d24:	b09c      	sub	sp, #112	; 0x70
 8004d26:	ab1d      	add	r3, sp, #116	; 0x74
 8004d28:	9002      	str	r0, [sp, #8]
 8004d2a:	9006      	str	r0, [sp, #24]
 8004d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d30:	4809      	ldr	r0, [pc, #36]	; (8004d58 <siprintf+0x38>)
 8004d32:	9107      	str	r1, [sp, #28]
 8004d34:	9104      	str	r1, [sp, #16]
 8004d36:	4909      	ldr	r1, [pc, #36]	; (8004d5c <siprintf+0x3c>)
 8004d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d3c:	9105      	str	r1, [sp, #20]
 8004d3e:	6800      	ldr	r0, [r0, #0]
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	a902      	add	r1, sp, #8
 8004d44:	f000 f868 	bl	8004e18 <_svfiprintf_r>
 8004d48:	9b02      	ldr	r3, [sp, #8]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	b01c      	add	sp, #112	; 0x70
 8004d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d54:	b003      	add	sp, #12
 8004d56:	4770      	bx	lr
 8004d58:	2000000c 	.word	0x2000000c
 8004d5c:	ffff0208 	.word	0xffff0208

08004d60 <__ssputs_r>:
 8004d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	688e      	ldr	r6, [r1, #8]
 8004d66:	429e      	cmp	r6, r3
 8004d68:	4682      	mov	sl, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	4690      	mov	r8, r2
 8004d6e:	461f      	mov	r7, r3
 8004d70:	d838      	bhi.n	8004de4 <__ssputs_r+0x84>
 8004d72:	898a      	ldrh	r2, [r1, #12]
 8004d74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d78:	d032      	beq.n	8004de0 <__ssputs_r+0x80>
 8004d7a:	6825      	ldr	r5, [r4, #0]
 8004d7c:	6909      	ldr	r1, [r1, #16]
 8004d7e:	eba5 0901 	sub.w	r9, r5, r1
 8004d82:	6965      	ldr	r5, [r4, #20]
 8004d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	444b      	add	r3, r9
 8004d90:	106d      	asrs	r5, r5, #1
 8004d92:	429d      	cmp	r5, r3
 8004d94:	bf38      	it	cc
 8004d96:	461d      	movcc	r5, r3
 8004d98:	0553      	lsls	r3, r2, #21
 8004d9a:	d531      	bpl.n	8004e00 <__ssputs_r+0xa0>
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	f000 fb63 	bl	8005468 <_malloc_r>
 8004da2:	4606      	mov	r6, r0
 8004da4:	b950      	cbnz	r0, 8004dbc <__ssputs_r+0x5c>
 8004da6:	230c      	movs	r3, #12
 8004da8:	f8ca 3000 	str.w	r3, [sl]
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbc:	6921      	ldr	r1, [r4, #16]
 8004dbe:	464a      	mov	r2, r9
 8004dc0:	f000 fabe 	bl	8005340 <memcpy>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	6126      	str	r6, [r4, #16]
 8004dd2:	6165      	str	r5, [r4, #20]
 8004dd4:	444e      	add	r6, r9
 8004dd6:	eba5 0509 	sub.w	r5, r5, r9
 8004dda:	6026      	str	r6, [r4, #0]
 8004ddc:	60a5      	str	r5, [r4, #8]
 8004dde:	463e      	mov	r6, r7
 8004de0:	42be      	cmp	r6, r7
 8004de2:	d900      	bls.n	8004de6 <__ssputs_r+0x86>
 8004de4:	463e      	mov	r6, r7
 8004de6:	6820      	ldr	r0, [r4, #0]
 8004de8:	4632      	mov	r2, r6
 8004dea:	4641      	mov	r1, r8
 8004dec:	f000 fab6 	bl	800535c <memmove>
 8004df0:	68a3      	ldr	r3, [r4, #8]
 8004df2:	1b9b      	subs	r3, r3, r6
 8004df4:	60a3      	str	r3, [r4, #8]
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	4433      	add	r3, r6
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	e7db      	b.n	8004db8 <__ssputs_r+0x58>
 8004e00:	462a      	mov	r2, r5
 8004e02:	f000 fba5 	bl	8005550 <_realloc_r>
 8004e06:	4606      	mov	r6, r0
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d1e1      	bne.n	8004dd0 <__ssputs_r+0x70>
 8004e0c:	6921      	ldr	r1, [r4, #16]
 8004e0e:	4650      	mov	r0, sl
 8004e10:	f000 fabe 	bl	8005390 <_free_r>
 8004e14:	e7c7      	b.n	8004da6 <__ssputs_r+0x46>
	...

08004e18 <_svfiprintf_r>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	4698      	mov	r8, r3
 8004e1e:	898b      	ldrh	r3, [r1, #12]
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	b09d      	sub	sp, #116	; 0x74
 8004e24:	4607      	mov	r7, r0
 8004e26:	460d      	mov	r5, r1
 8004e28:	4614      	mov	r4, r2
 8004e2a:	d50e      	bpl.n	8004e4a <_svfiprintf_r+0x32>
 8004e2c:	690b      	ldr	r3, [r1, #16]
 8004e2e:	b963      	cbnz	r3, 8004e4a <_svfiprintf_r+0x32>
 8004e30:	2140      	movs	r1, #64	; 0x40
 8004e32:	f000 fb19 	bl	8005468 <_malloc_r>
 8004e36:	6028      	str	r0, [r5, #0]
 8004e38:	6128      	str	r0, [r5, #16]
 8004e3a:	b920      	cbnz	r0, 8004e46 <_svfiprintf_r+0x2e>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	e0d1      	b.n	8004fea <_svfiprintf_r+0x1d2>
 8004e46:	2340      	movs	r3, #64	; 0x40
 8004e48:	616b      	str	r3, [r5, #20]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e4e:	2320      	movs	r3, #32
 8004e50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e58:	2330      	movs	r3, #48	; 0x30
 8004e5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005004 <_svfiprintf_r+0x1ec>
 8004e5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e62:	f04f 0901 	mov.w	r9, #1
 8004e66:	4623      	mov	r3, r4
 8004e68:	469a      	mov	sl, r3
 8004e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e6e:	b10a      	cbz	r2, 8004e74 <_svfiprintf_r+0x5c>
 8004e70:	2a25      	cmp	r2, #37	; 0x25
 8004e72:	d1f9      	bne.n	8004e68 <_svfiprintf_r+0x50>
 8004e74:	ebba 0b04 	subs.w	fp, sl, r4
 8004e78:	d00b      	beq.n	8004e92 <_svfiprintf_r+0x7a>
 8004e7a:	465b      	mov	r3, fp
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4638      	mov	r0, r7
 8004e82:	f7ff ff6d 	bl	8004d60 <__ssputs_r>
 8004e86:	3001      	adds	r0, #1
 8004e88:	f000 80aa 	beq.w	8004fe0 <_svfiprintf_r+0x1c8>
 8004e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e8e:	445a      	add	r2, fp
 8004e90:	9209      	str	r2, [sp, #36]	; 0x24
 8004e92:	f89a 3000 	ldrb.w	r3, [sl]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80a2 	beq.w	8004fe0 <_svfiprintf_r+0x1c8>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea6:	f10a 0a01 	add.w	sl, sl, #1
 8004eaa:	9304      	str	r3, [sp, #16]
 8004eac:	9307      	str	r3, [sp, #28]
 8004eae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8004eb4:	4654      	mov	r4, sl
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebc:	4851      	ldr	r0, [pc, #324]	; (8005004 <_svfiprintf_r+0x1ec>)
 8004ebe:	f7fb f99f 	bl	8000200 <memchr>
 8004ec2:	9a04      	ldr	r2, [sp, #16]
 8004ec4:	b9d8      	cbnz	r0, 8004efe <_svfiprintf_r+0xe6>
 8004ec6:	06d0      	lsls	r0, r2, #27
 8004ec8:	bf44      	itt	mi
 8004eca:	2320      	movmi	r3, #32
 8004ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ed0:	0711      	lsls	r1, r2, #28
 8004ed2:	bf44      	itt	mi
 8004ed4:	232b      	movmi	r3, #43	; 0x2b
 8004ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eda:	f89a 3000 	ldrb.w	r3, [sl]
 8004ede:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee0:	d015      	beq.n	8004f0e <_svfiprintf_r+0xf6>
 8004ee2:	9a07      	ldr	r2, [sp, #28]
 8004ee4:	4654      	mov	r4, sl
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f04f 0c0a 	mov.w	ip, #10
 8004eec:	4621      	mov	r1, r4
 8004eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ef2:	3b30      	subs	r3, #48	; 0x30
 8004ef4:	2b09      	cmp	r3, #9
 8004ef6:	d94e      	bls.n	8004f96 <_svfiprintf_r+0x17e>
 8004ef8:	b1b0      	cbz	r0, 8004f28 <_svfiprintf_r+0x110>
 8004efa:	9207      	str	r2, [sp, #28]
 8004efc:	e014      	b.n	8004f28 <_svfiprintf_r+0x110>
 8004efe:	eba0 0308 	sub.w	r3, r0, r8
 8004f02:	fa09 f303 	lsl.w	r3, r9, r3
 8004f06:	4313      	orrs	r3, r2
 8004f08:	9304      	str	r3, [sp, #16]
 8004f0a:	46a2      	mov	sl, r4
 8004f0c:	e7d2      	b.n	8004eb4 <_svfiprintf_r+0x9c>
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	1d19      	adds	r1, r3, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	9103      	str	r1, [sp, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfbb      	ittet	lt
 8004f1a:	425b      	neglt	r3, r3
 8004f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f20:	9307      	strge	r3, [sp, #28]
 8004f22:	9307      	strlt	r3, [sp, #28]
 8004f24:	bfb8      	it	lt
 8004f26:	9204      	strlt	r2, [sp, #16]
 8004f28:	7823      	ldrb	r3, [r4, #0]
 8004f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f2c:	d10c      	bne.n	8004f48 <_svfiprintf_r+0x130>
 8004f2e:	7863      	ldrb	r3, [r4, #1]
 8004f30:	2b2a      	cmp	r3, #42	; 0x2a
 8004f32:	d135      	bne.n	8004fa0 <_svfiprintf_r+0x188>
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	1d1a      	adds	r2, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	9203      	str	r2, [sp, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bfb8      	it	lt
 8004f40:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f44:	3402      	adds	r4, #2
 8004f46:	9305      	str	r3, [sp, #20]
 8004f48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005014 <_svfiprintf_r+0x1fc>
 8004f4c:	7821      	ldrb	r1, [r4, #0]
 8004f4e:	2203      	movs	r2, #3
 8004f50:	4650      	mov	r0, sl
 8004f52:	f7fb f955 	bl	8000200 <memchr>
 8004f56:	b140      	cbz	r0, 8004f6a <_svfiprintf_r+0x152>
 8004f58:	2340      	movs	r3, #64	; 0x40
 8004f5a:	eba0 000a 	sub.w	r0, r0, sl
 8004f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f62:	9b04      	ldr	r3, [sp, #16]
 8004f64:	4303      	orrs	r3, r0
 8004f66:	3401      	adds	r4, #1
 8004f68:	9304      	str	r3, [sp, #16]
 8004f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6e:	4826      	ldr	r0, [pc, #152]	; (8005008 <_svfiprintf_r+0x1f0>)
 8004f70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f74:	2206      	movs	r2, #6
 8004f76:	f7fb f943 	bl	8000200 <memchr>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d038      	beq.n	8004ff0 <_svfiprintf_r+0x1d8>
 8004f7e:	4b23      	ldr	r3, [pc, #140]	; (800500c <_svfiprintf_r+0x1f4>)
 8004f80:	bb1b      	cbnz	r3, 8004fca <_svfiprintf_r+0x1b2>
 8004f82:	9b03      	ldr	r3, [sp, #12]
 8004f84:	3307      	adds	r3, #7
 8004f86:	f023 0307 	bic.w	r3, r3, #7
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	9303      	str	r3, [sp, #12]
 8004f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f90:	4433      	add	r3, r6
 8004f92:	9309      	str	r3, [sp, #36]	; 0x24
 8004f94:	e767      	b.n	8004e66 <_svfiprintf_r+0x4e>
 8004f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	e7a5      	b.n	8004eec <_svfiprintf_r+0xd4>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	3401      	adds	r4, #1
 8004fa4:	9305      	str	r3, [sp, #20]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f04f 0c0a 	mov.w	ip, #10
 8004fac:	4620      	mov	r0, r4
 8004fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fb2:	3a30      	subs	r2, #48	; 0x30
 8004fb4:	2a09      	cmp	r2, #9
 8004fb6:	d903      	bls.n	8004fc0 <_svfiprintf_r+0x1a8>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0c5      	beq.n	8004f48 <_svfiprintf_r+0x130>
 8004fbc:	9105      	str	r1, [sp, #20]
 8004fbe:	e7c3      	b.n	8004f48 <_svfiprintf_r+0x130>
 8004fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e7f0      	b.n	8004fac <_svfiprintf_r+0x194>
 8004fca:	ab03      	add	r3, sp, #12
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	462a      	mov	r2, r5
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <_svfiprintf_r+0x1f8>)
 8004fd2:	a904      	add	r1, sp, #16
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	f3af 8000 	nop.w
 8004fda:	1c42      	adds	r2, r0, #1
 8004fdc:	4606      	mov	r6, r0
 8004fde:	d1d6      	bne.n	8004f8e <_svfiprintf_r+0x176>
 8004fe0:	89ab      	ldrh	r3, [r5, #12]
 8004fe2:	065b      	lsls	r3, r3, #25
 8004fe4:	f53f af2c 	bmi.w	8004e40 <_svfiprintf_r+0x28>
 8004fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fea:	b01d      	add	sp, #116	; 0x74
 8004fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff0:	ab03      	add	r3, sp, #12
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	462a      	mov	r2, r5
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <_svfiprintf_r+0x1f8>)
 8004ff8:	a904      	add	r1, sp, #16
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	f000 f87a 	bl	80050f4 <_printf_i>
 8005000:	e7eb      	b.n	8004fda <_svfiprintf_r+0x1c2>
 8005002:	bf00      	nop
 8005004:	0800567c 	.word	0x0800567c
 8005008:	08005686 	.word	0x08005686
 800500c:	00000000 	.word	0x00000000
 8005010:	08004d61 	.word	0x08004d61
 8005014:	08005682 	.word	0x08005682

08005018 <_printf_common>:
 8005018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	4616      	mov	r6, r2
 800501e:	4699      	mov	r9, r3
 8005020:	688a      	ldr	r2, [r1, #8]
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005028:	4293      	cmp	r3, r2
 800502a:	bfb8      	it	lt
 800502c:	4613      	movlt	r3, r2
 800502e:	6033      	str	r3, [r6, #0]
 8005030:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005034:	4607      	mov	r7, r0
 8005036:	460c      	mov	r4, r1
 8005038:	b10a      	cbz	r2, 800503e <_printf_common+0x26>
 800503a:	3301      	adds	r3, #1
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	0699      	lsls	r1, r3, #26
 8005042:	bf42      	ittt	mi
 8005044:	6833      	ldrmi	r3, [r6, #0]
 8005046:	3302      	addmi	r3, #2
 8005048:	6033      	strmi	r3, [r6, #0]
 800504a:	6825      	ldr	r5, [r4, #0]
 800504c:	f015 0506 	ands.w	r5, r5, #6
 8005050:	d106      	bne.n	8005060 <_printf_common+0x48>
 8005052:	f104 0a19 	add.w	sl, r4, #25
 8005056:	68e3      	ldr	r3, [r4, #12]
 8005058:	6832      	ldr	r2, [r6, #0]
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	42ab      	cmp	r3, r5
 800505e:	dc26      	bgt.n	80050ae <_printf_common+0x96>
 8005060:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005064:	1e13      	subs	r3, r2, #0
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	bf18      	it	ne
 800506a:	2301      	movne	r3, #1
 800506c:	0692      	lsls	r2, r2, #26
 800506e:	d42b      	bmi.n	80050c8 <_printf_common+0xb0>
 8005070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005074:	4649      	mov	r1, r9
 8005076:	4638      	mov	r0, r7
 8005078:	47c0      	blx	r8
 800507a:	3001      	adds	r0, #1
 800507c:	d01e      	beq.n	80050bc <_printf_common+0xa4>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	68e5      	ldr	r5, [r4, #12]
 8005082:	6832      	ldr	r2, [r6, #0]
 8005084:	f003 0306 	and.w	r3, r3, #6
 8005088:	2b04      	cmp	r3, #4
 800508a:	bf08      	it	eq
 800508c:	1aad      	subeq	r5, r5, r2
 800508e:	68a3      	ldr	r3, [r4, #8]
 8005090:	6922      	ldr	r2, [r4, #16]
 8005092:	bf0c      	ite	eq
 8005094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005098:	2500      	movne	r5, #0
 800509a:	4293      	cmp	r3, r2
 800509c:	bfc4      	itt	gt
 800509e:	1a9b      	subgt	r3, r3, r2
 80050a0:	18ed      	addgt	r5, r5, r3
 80050a2:	2600      	movs	r6, #0
 80050a4:	341a      	adds	r4, #26
 80050a6:	42b5      	cmp	r5, r6
 80050a8:	d11a      	bne.n	80050e0 <_printf_common+0xc8>
 80050aa:	2000      	movs	r0, #0
 80050ac:	e008      	b.n	80050c0 <_printf_common+0xa8>
 80050ae:	2301      	movs	r3, #1
 80050b0:	4652      	mov	r2, sl
 80050b2:	4649      	mov	r1, r9
 80050b4:	4638      	mov	r0, r7
 80050b6:	47c0      	blx	r8
 80050b8:	3001      	adds	r0, #1
 80050ba:	d103      	bne.n	80050c4 <_printf_common+0xac>
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295
 80050c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c4:	3501      	adds	r5, #1
 80050c6:	e7c6      	b.n	8005056 <_printf_common+0x3e>
 80050c8:	18e1      	adds	r1, r4, r3
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	2030      	movs	r0, #48	; 0x30
 80050ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050d2:	4422      	add	r2, r4
 80050d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050dc:	3302      	adds	r3, #2
 80050de:	e7c7      	b.n	8005070 <_printf_common+0x58>
 80050e0:	2301      	movs	r3, #1
 80050e2:	4622      	mov	r2, r4
 80050e4:	4649      	mov	r1, r9
 80050e6:	4638      	mov	r0, r7
 80050e8:	47c0      	blx	r8
 80050ea:	3001      	adds	r0, #1
 80050ec:	d0e6      	beq.n	80050bc <_printf_common+0xa4>
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7d9      	b.n	80050a6 <_printf_common+0x8e>
	...

080050f4 <_printf_i>:
 80050f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	7e0f      	ldrb	r7, [r1, #24]
 80050fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050fc:	2f78      	cmp	r7, #120	; 0x78
 80050fe:	4691      	mov	r9, r2
 8005100:	4680      	mov	r8, r0
 8005102:	460c      	mov	r4, r1
 8005104:	469a      	mov	sl, r3
 8005106:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800510a:	d807      	bhi.n	800511c <_printf_i+0x28>
 800510c:	2f62      	cmp	r7, #98	; 0x62
 800510e:	d80a      	bhi.n	8005126 <_printf_i+0x32>
 8005110:	2f00      	cmp	r7, #0
 8005112:	f000 80d8 	beq.w	80052c6 <_printf_i+0x1d2>
 8005116:	2f58      	cmp	r7, #88	; 0x58
 8005118:	f000 80a3 	beq.w	8005262 <_printf_i+0x16e>
 800511c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005124:	e03a      	b.n	800519c <_printf_i+0xa8>
 8005126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800512a:	2b15      	cmp	r3, #21
 800512c:	d8f6      	bhi.n	800511c <_printf_i+0x28>
 800512e:	a101      	add	r1, pc, #4	; (adr r1, 8005134 <_printf_i+0x40>)
 8005130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005134:	0800518d 	.word	0x0800518d
 8005138:	080051a1 	.word	0x080051a1
 800513c:	0800511d 	.word	0x0800511d
 8005140:	0800511d 	.word	0x0800511d
 8005144:	0800511d 	.word	0x0800511d
 8005148:	0800511d 	.word	0x0800511d
 800514c:	080051a1 	.word	0x080051a1
 8005150:	0800511d 	.word	0x0800511d
 8005154:	0800511d 	.word	0x0800511d
 8005158:	0800511d 	.word	0x0800511d
 800515c:	0800511d 	.word	0x0800511d
 8005160:	080052ad 	.word	0x080052ad
 8005164:	080051d1 	.word	0x080051d1
 8005168:	0800528f 	.word	0x0800528f
 800516c:	0800511d 	.word	0x0800511d
 8005170:	0800511d 	.word	0x0800511d
 8005174:	080052cf 	.word	0x080052cf
 8005178:	0800511d 	.word	0x0800511d
 800517c:	080051d1 	.word	0x080051d1
 8005180:	0800511d 	.word	0x0800511d
 8005184:	0800511d 	.word	0x0800511d
 8005188:	08005297 	.word	0x08005297
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	1d1a      	adds	r2, r3, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800519c:	2301      	movs	r3, #1
 800519e:	e0a3      	b.n	80052e8 <_printf_i+0x1f4>
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	6829      	ldr	r1, [r5, #0]
 80051a4:	0606      	lsls	r6, r0, #24
 80051a6:	f101 0304 	add.w	r3, r1, #4
 80051aa:	d50a      	bpl.n	80051c2 <_printf_i+0xce>
 80051ac:	680e      	ldr	r6, [r1, #0]
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	2e00      	cmp	r6, #0
 80051b2:	da03      	bge.n	80051bc <_printf_i+0xc8>
 80051b4:	232d      	movs	r3, #45	; 0x2d
 80051b6:	4276      	negs	r6, r6
 80051b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051bc:	485e      	ldr	r0, [pc, #376]	; (8005338 <_printf_i+0x244>)
 80051be:	230a      	movs	r3, #10
 80051c0:	e019      	b.n	80051f6 <_printf_i+0x102>
 80051c2:	680e      	ldr	r6, [r1, #0]
 80051c4:	602b      	str	r3, [r5, #0]
 80051c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051ca:	bf18      	it	ne
 80051cc:	b236      	sxthne	r6, r6
 80051ce:	e7ef      	b.n	80051b0 <_printf_i+0xbc>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	6820      	ldr	r0, [r4, #0]
 80051d4:	1d19      	adds	r1, r3, #4
 80051d6:	6029      	str	r1, [r5, #0]
 80051d8:	0601      	lsls	r1, r0, #24
 80051da:	d501      	bpl.n	80051e0 <_printf_i+0xec>
 80051dc:	681e      	ldr	r6, [r3, #0]
 80051de:	e002      	b.n	80051e6 <_printf_i+0xf2>
 80051e0:	0646      	lsls	r6, r0, #25
 80051e2:	d5fb      	bpl.n	80051dc <_printf_i+0xe8>
 80051e4:	881e      	ldrh	r6, [r3, #0]
 80051e6:	4854      	ldr	r0, [pc, #336]	; (8005338 <_printf_i+0x244>)
 80051e8:	2f6f      	cmp	r7, #111	; 0x6f
 80051ea:	bf0c      	ite	eq
 80051ec:	2308      	moveq	r3, #8
 80051ee:	230a      	movne	r3, #10
 80051f0:	2100      	movs	r1, #0
 80051f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051f6:	6865      	ldr	r5, [r4, #4]
 80051f8:	60a5      	str	r5, [r4, #8]
 80051fa:	2d00      	cmp	r5, #0
 80051fc:	bfa2      	ittt	ge
 80051fe:	6821      	ldrge	r1, [r4, #0]
 8005200:	f021 0104 	bicge.w	r1, r1, #4
 8005204:	6021      	strge	r1, [r4, #0]
 8005206:	b90e      	cbnz	r6, 800520c <_printf_i+0x118>
 8005208:	2d00      	cmp	r5, #0
 800520a:	d04d      	beq.n	80052a8 <_printf_i+0x1b4>
 800520c:	4615      	mov	r5, r2
 800520e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005212:	fb03 6711 	mls	r7, r3, r1, r6
 8005216:	5dc7      	ldrb	r7, [r0, r7]
 8005218:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800521c:	4637      	mov	r7, r6
 800521e:	42bb      	cmp	r3, r7
 8005220:	460e      	mov	r6, r1
 8005222:	d9f4      	bls.n	800520e <_printf_i+0x11a>
 8005224:	2b08      	cmp	r3, #8
 8005226:	d10b      	bne.n	8005240 <_printf_i+0x14c>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	07de      	lsls	r6, r3, #31
 800522c:	d508      	bpl.n	8005240 <_printf_i+0x14c>
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	6861      	ldr	r1, [r4, #4]
 8005232:	4299      	cmp	r1, r3
 8005234:	bfde      	ittt	le
 8005236:	2330      	movle	r3, #48	; 0x30
 8005238:	f805 3c01 	strble.w	r3, [r5, #-1]
 800523c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005240:	1b52      	subs	r2, r2, r5
 8005242:	6122      	str	r2, [r4, #16]
 8005244:	f8cd a000 	str.w	sl, [sp]
 8005248:	464b      	mov	r3, r9
 800524a:	aa03      	add	r2, sp, #12
 800524c:	4621      	mov	r1, r4
 800524e:	4640      	mov	r0, r8
 8005250:	f7ff fee2 	bl	8005018 <_printf_common>
 8005254:	3001      	adds	r0, #1
 8005256:	d14c      	bne.n	80052f2 <_printf_i+0x1fe>
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	b004      	add	sp, #16
 800525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005262:	4835      	ldr	r0, [pc, #212]	; (8005338 <_printf_i+0x244>)
 8005264:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005268:	6829      	ldr	r1, [r5, #0]
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005270:	6029      	str	r1, [r5, #0]
 8005272:	061d      	lsls	r5, r3, #24
 8005274:	d514      	bpl.n	80052a0 <_printf_i+0x1ac>
 8005276:	07df      	lsls	r7, r3, #31
 8005278:	bf44      	itt	mi
 800527a:	f043 0320 	orrmi.w	r3, r3, #32
 800527e:	6023      	strmi	r3, [r4, #0]
 8005280:	b91e      	cbnz	r6, 800528a <_printf_i+0x196>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	f023 0320 	bic.w	r3, r3, #32
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	2310      	movs	r3, #16
 800528c:	e7b0      	b.n	80051f0 <_printf_i+0xfc>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	f043 0320 	orr.w	r3, r3, #32
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	2378      	movs	r3, #120	; 0x78
 8005298:	4828      	ldr	r0, [pc, #160]	; (800533c <_printf_i+0x248>)
 800529a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800529e:	e7e3      	b.n	8005268 <_printf_i+0x174>
 80052a0:	0659      	lsls	r1, r3, #25
 80052a2:	bf48      	it	mi
 80052a4:	b2b6      	uxthmi	r6, r6
 80052a6:	e7e6      	b.n	8005276 <_printf_i+0x182>
 80052a8:	4615      	mov	r5, r2
 80052aa:	e7bb      	b.n	8005224 <_printf_i+0x130>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	6826      	ldr	r6, [r4, #0]
 80052b0:	6961      	ldr	r1, [r4, #20]
 80052b2:	1d18      	adds	r0, r3, #4
 80052b4:	6028      	str	r0, [r5, #0]
 80052b6:	0635      	lsls	r5, r6, #24
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	d501      	bpl.n	80052c0 <_printf_i+0x1cc>
 80052bc:	6019      	str	r1, [r3, #0]
 80052be:	e002      	b.n	80052c6 <_printf_i+0x1d2>
 80052c0:	0670      	lsls	r0, r6, #25
 80052c2:	d5fb      	bpl.n	80052bc <_printf_i+0x1c8>
 80052c4:	8019      	strh	r1, [r3, #0]
 80052c6:	2300      	movs	r3, #0
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	4615      	mov	r5, r2
 80052cc:	e7ba      	b.n	8005244 <_printf_i+0x150>
 80052ce:	682b      	ldr	r3, [r5, #0]
 80052d0:	1d1a      	adds	r2, r3, #4
 80052d2:	602a      	str	r2, [r5, #0]
 80052d4:	681d      	ldr	r5, [r3, #0]
 80052d6:	6862      	ldr	r2, [r4, #4]
 80052d8:	2100      	movs	r1, #0
 80052da:	4628      	mov	r0, r5
 80052dc:	f7fa ff90 	bl	8000200 <memchr>
 80052e0:	b108      	cbz	r0, 80052e6 <_printf_i+0x1f2>
 80052e2:	1b40      	subs	r0, r0, r5
 80052e4:	6060      	str	r0, [r4, #4]
 80052e6:	6863      	ldr	r3, [r4, #4]
 80052e8:	6123      	str	r3, [r4, #16]
 80052ea:	2300      	movs	r3, #0
 80052ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f0:	e7a8      	b.n	8005244 <_printf_i+0x150>
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	462a      	mov	r2, r5
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	47d0      	blx	sl
 80052fc:	3001      	adds	r0, #1
 80052fe:	d0ab      	beq.n	8005258 <_printf_i+0x164>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	079b      	lsls	r3, r3, #30
 8005304:	d413      	bmi.n	800532e <_printf_i+0x23a>
 8005306:	68e0      	ldr	r0, [r4, #12]
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	4298      	cmp	r0, r3
 800530c:	bfb8      	it	lt
 800530e:	4618      	movlt	r0, r3
 8005310:	e7a4      	b.n	800525c <_printf_i+0x168>
 8005312:	2301      	movs	r3, #1
 8005314:	4632      	mov	r2, r6
 8005316:	4649      	mov	r1, r9
 8005318:	4640      	mov	r0, r8
 800531a:	47d0      	blx	sl
 800531c:	3001      	adds	r0, #1
 800531e:	d09b      	beq.n	8005258 <_printf_i+0x164>
 8005320:	3501      	adds	r5, #1
 8005322:	68e3      	ldr	r3, [r4, #12]
 8005324:	9903      	ldr	r1, [sp, #12]
 8005326:	1a5b      	subs	r3, r3, r1
 8005328:	42ab      	cmp	r3, r5
 800532a:	dcf2      	bgt.n	8005312 <_printf_i+0x21e>
 800532c:	e7eb      	b.n	8005306 <_printf_i+0x212>
 800532e:	2500      	movs	r5, #0
 8005330:	f104 0619 	add.w	r6, r4, #25
 8005334:	e7f5      	b.n	8005322 <_printf_i+0x22e>
 8005336:	bf00      	nop
 8005338:	0800568d 	.word	0x0800568d
 800533c:	0800569e 	.word	0x0800569e

08005340 <memcpy>:
 8005340:	440a      	add	r2, r1
 8005342:	4291      	cmp	r1, r2
 8005344:	f100 33ff 	add.w	r3, r0, #4294967295
 8005348:	d100      	bne.n	800534c <memcpy+0xc>
 800534a:	4770      	bx	lr
 800534c:	b510      	push	{r4, lr}
 800534e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005356:	4291      	cmp	r1, r2
 8005358:	d1f9      	bne.n	800534e <memcpy+0xe>
 800535a:	bd10      	pop	{r4, pc}

0800535c <memmove>:
 800535c:	4288      	cmp	r0, r1
 800535e:	b510      	push	{r4, lr}
 8005360:	eb01 0402 	add.w	r4, r1, r2
 8005364:	d902      	bls.n	800536c <memmove+0x10>
 8005366:	4284      	cmp	r4, r0
 8005368:	4623      	mov	r3, r4
 800536a:	d807      	bhi.n	800537c <memmove+0x20>
 800536c:	1e43      	subs	r3, r0, #1
 800536e:	42a1      	cmp	r1, r4
 8005370:	d008      	beq.n	8005384 <memmove+0x28>
 8005372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800537a:	e7f8      	b.n	800536e <memmove+0x12>
 800537c:	4402      	add	r2, r0
 800537e:	4601      	mov	r1, r0
 8005380:	428a      	cmp	r2, r1
 8005382:	d100      	bne.n	8005386 <memmove+0x2a>
 8005384:	bd10      	pop	{r4, pc}
 8005386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800538a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800538e:	e7f7      	b.n	8005380 <memmove+0x24>

08005390 <_free_r>:
 8005390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005392:	2900      	cmp	r1, #0
 8005394:	d044      	beq.n	8005420 <_free_r+0x90>
 8005396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800539a:	9001      	str	r0, [sp, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f1a1 0404 	sub.w	r4, r1, #4
 80053a2:	bfb8      	it	lt
 80053a4:	18e4      	addlt	r4, r4, r3
 80053a6:	f000 f913 	bl	80055d0 <__malloc_lock>
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <_free_r+0x94>)
 80053ac:	9801      	ldr	r0, [sp, #4]
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	b933      	cbnz	r3, 80053c0 <_free_r+0x30>
 80053b2:	6063      	str	r3, [r4, #4]
 80053b4:	6014      	str	r4, [r2, #0]
 80053b6:	b003      	add	sp, #12
 80053b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053bc:	f000 b90e 	b.w	80055dc <__malloc_unlock>
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	d908      	bls.n	80053d6 <_free_r+0x46>
 80053c4:	6825      	ldr	r5, [r4, #0]
 80053c6:	1961      	adds	r1, r4, r5
 80053c8:	428b      	cmp	r3, r1
 80053ca:	bf01      	itttt	eq
 80053cc:	6819      	ldreq	r1, [r3, #0]
 80053ce:	685b      	ldreq	r3, [r3, #4]
 80053d0:	1949      	addeq	r1, r1, r5
 80053d2:	6021      	streq	r1, [r4, #0]
 80053d4:	e7ed      	b.n	80053b2 <_free_r+0x22>
 80053d6:	461a      	mov	r2, r3
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b10b      	cbz	r3, 80053e0 <_free_r+0x50>
 80053dc:	42a3      	cmp	r3, r4
 80053de:	d9fa      	bls.n	80053d6 <_free_r+0x46>
 80053e0:	6811      	ldr	r1, [r2, #0]
 80053e2:	1855      	adds	r5, r2, r1
 80053e4:	42a5      	cmp	r5, r4
 80053e6:	d10b      	bne.n	8005400 <_free_r+0x70>
 80053e8:	6824      	ldr	r4, [r4, #0]
 80053ea:	4421      	add	r1, r4
 80053ec:	1854      	adds	r4, r2, r1
 80053ee:	42a3      	cmp	r3, r4
 80053f0:	6011      	str	r1, [r2, #0]
 80053f2:	d1e0      	bne.n	80053b6 <_free_r+0x26>
 80053f4:	681c      	ldr	r4, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	6053      	str	r3, [r2, #4]
 80053fa:	4421      	add	r1, r4
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	e7da      	b.n	80053b6 <_free_r+0x26>
 8005400:	d902      	bls.n	8005408 <_free_r+0x78>
 8005402:	230c      	movs	r3, #12
 8005404:	6003      	str	r3, [r0, #0]
 8005406:	e7d6      	b.n	80053b6 <_free_r+0x26>
 8005408:	6825      	ldr	r5, [r4, #0]
 800540a:	1961      	adds	r1, r4, r5
 800540c:	428b      	cmp	r3, r1
 800540e:	bf04      	itt	eq
 8005410:	6819      	ldreq	r1, [r3, #0]
 8005412:	685b      	ldreq	r3, [r3, #4]
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	bf04      	itt	eq
 8005418:	1949      	addeq	r1, r1, r5
 800541a:	6021      	streq	r1, [r4, #0]
 800541c:	6054      	str	r4, [r2, #4]
 800541e:	e7ca      	b.n	80053b6 <_free_r+0x26>
 8005420:	b003      	add	sp, #12
 8005422:	bd30      	pop	{r4, r5, pc}
 8005424:	200008f0 	.word	0x200008f0

08005428 <sbrk_aligned>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	4e0e      	ldr	r6, [pc, #56]	; (8005464 <sbrk_aligned+0x3c>)
 800542c:	460c      	mov	r4, r1
 800542e:	6831      	ldr	r1, [r6, #0]
 8005430:	4605      	mov	r5, r0
 8005432:	b911      	cbnz	r1, 800543a <sbrk_aligned+0x12>
 8005434:	f000 f8bc 	bl	80055b0 <_sbrk_r>
 8005438:	6030      	str	r0, [r6, #0]
 800543a:	4621      	mov	r1, r4
 800543c:	4628      	mov	r0, r5
 800543e:	f000 f8b7 	bl	80055b0 <_sbrk_r>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	d00a      	beq.n	800545c <sbrk_aligned+0x34>
 8005446:	1cc4      	adds	r4, r0, #3
 8005448:	f024 0403 	bic.w	r4, r4, #3
 800544c:	42a0      	cmp	r0, r4
 800544e:	d007      	beq.n	8005460 <sbrk_aligned+0x38>
 8005450:	1a21      	subs	r1, r4, r0
 8005452:	4628      	mov	r0, r5
 8005454:	f000 f8ac 	bl	80055b0 <_sbrk_r>
 8005458:	3001      	adds	r0, #1
 800545a:	d101      	bne.n	8005460 <sbrk_aligned+0x38>
 800545c:	f04f 34ff 	mov.w	r4, #4294967295
 8005460:	4620      	mov	r0, r4
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	200008f4 	.word	0x200008f4

08005468 <_malloc_r>:
 8005468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546c:	1ccd      	adds	r5, r1, #3
 800546e:	f025 0503 	bic.w	r5, r5, #3
 8005472:	3508      	adds	r5, #8
 8005474:	2d0c      	cmp	r5, #12
 8005476:	bf38      	it	cc
 8005478:	250c      	movcc	r5, #12
 800547a:	2d00      	cmp	r5, #0
 800547c:	4607      	mov	r7, r0
 800547e:	db01      	blt.n	8005484 <_malloc_r+0x1c>
 8005480:	42a9      	cmp	r1, r5
 8005482:	d905      	bls.n	8005490 <_malloc_r+0x28>
 8005484:	230c      	movs	r3, #12
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	2600      	movs	r6, #0
 800548a:	4630      	mov	r0, r6
 800548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005490:	4e2e      	ldr	r6, [pc, #184]	; (800554c <_malloc_r+0xe4>)
 8005492:	f000 f89d 	bl	80055d0 <__malloc_lock>
 8005496:	6833      	ldr	r3, [r6, #0]
 8005498:	461c      	mov	r4, r3
 800549a:	bb34      	cbnz	r4, 80054ea <_malloc_r+0x82>
 800549c:	4629      	mov	r1, r5
 800549e:	4638      	mov	r0, r7
 80054a0:	f7ff ffc2 	bl	8005428 <sbrk_aligned>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	4604      	mov	r4, r0
 80054a8:	d14d      	bne.n	8005546 <_malloc_r+0xde>
 80054aa:	6834      	ldr	r4, [r6, #0]
 80054ac:	4626      	mov	r6, r4
 80054ae:	2e00      	cmp	r6, #0
 80054b0:	d140      	bne.n	8005534 <_malloc_r+0xcc>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	4631      	mov	r1, r6
 80054b6:	4638      	mov	r0, r7
 80054b8:	eb04 0803 	add.w	r8, r4, r3
 80054bc:	f000 f878 	bl	80055b0 <_sbrk_r>
 80054c0:	4580      	cmp	r8, r0
 80054c2:	d13a      	bne.n	800553a <_malloc_r+0xd2>
 80054c4:	6821      	ldr	r1, [r4, #0]
 80054c6:	3503      	adds	r5, #3
 80054c8:	1a6d      	subs	r5, r5, r1
 80054ca:	f025 0503 	bic.w	r5, r5, #3
 80054ce:	3508      	adds	r5, #8
 80054d0:	2d0c      	cmp	r5, #12
 80054d2:	bf38      	it	cc
 80054d4:	250c      	movcc	r5, #12
 80054d6:	4629      	mov	r1, r5
 80054d8:	4638      	mov	r0, r7
 80054da:	f7ff ffa5 	bl	8005428 <sbrk_aligned>
 80054de:	3001      	adds	r0, #1
 80054e0:	d02b      	beq.n	800553a <_malloc_r+0xd2>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	442b      	add	r3, r5
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	e00e      	b.n	8005508 <_malloc_r+0xa0>
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	1b52      	subs	r2, r2, r5
 80054ee:	d41e      	bmi.n	800552e <_malloc_r+0xc6>
 80054f0:	2a0b      	cmp	r2, #11
 80054f2:	d916      	bls.n	8005522 <_malloc_r+0xba>
 80054f4:	1961      	adds	r1, r4, r5
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	6025      	str	r5, [r4, #0]
 80054fa:	bf18      	it	ne
 80054fc:	6059      	strne	r1, [r3, #4]
 80054fe:	6863      	ldr	r3, [r4, #4]
 8005500:	bf08      	it	eq
 8005502:	6031      	streq	r1, [r6, #0]
 8005504:	5162      	str	r2, [r4, r5]
 8005506:	604b      	str	r3, [r1, #4]
 8005508:	4638      	mov	r0, r7
 800550a:	f104 060b 	add.w	r6, r4, #11
 800550e:	f000 f865 	bl	80055dc <__malloc_unlock>
 8005512:	f026 0607 	bic.w	r6, r6, #7
 8005516:	1d23      	adds	r3, r4, #4
 8005518:	1af2      	subs	r2, r6, r3
 800551a:	d0b6      	beq.n	800548a <_malloc_r+0x22>
 800551c:	1b9b      	subs	r3, r3, r6
 800551e:	50a3      	str	r3, [r4, r2]
 8005520:	e7b3      	b.n	800548a <_malloc_r+0x22>
 8005522:	6862      	ldr	r2, [r4, #4]
 8005524:	42a3      	cmp	r3, r4
 8005526:	bf0c      	ite	eq
 8005528:	6032      	streq	r2, [r6, #0]
 800552a:	605a      	strne	r2, [r3, #4]
 800552c:	e7ec      	b.n	8005508 <_malloc_r+0xa0>
 800552e:	4623      	mov	r3, r4
 8005530:	6864      	ldr	r4, [r4, #4]
 8005532:	e7b2      	b.n	800549a <_malloc_r+0x32>
 8005534:	4634      	mov	r4, r6
 8005536:	6876      	ldr	r6, [r6, #4]
 8005538:	e7b9      	b.n	80054ae <_malloc_r+0x46>
 800553a:	230c      	movs	r3, #12
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	4638      	mov	r0, r7
 8005540:	f000 f84c 	bl	80055dc <__malloc_unlock>
 8005544:	e7a1      	b.n	800548a <_malloc_r+0x22>
 8005546:	6025      	str	r5, [r4, #0]
 8005548:	e7de      	b.n	8005508 <_malloc_r+0xa0>
 800554a:	bf00      	nop
 800554c:	200008f0 	.word	0x200008f0

08005550 <_realloc_r>:
 8005550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005554:	4680      	mov	r8, r0
 8005556:	4614      	mov	r4, r2
 8005558:	460e      	mov	r6, r1
 800555a:	b921      	cbnz	r1, 8005566 <_realloc_r+0x16>
 800555c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	4611      	mov	r1, r2
 8005562:	f7ff bf81 	b.w	8005468 <_malloc_r>
 8005566:	b92a      	cbnz	r2, 8005574 <_realloc_r+0x24>
 8005568:	f7ff ff12 	bl	8005390 <_free_r>
 800556c:	4625      	mov	r5, r4
 800556e:	4628      	mov	r0, r5
 8005570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005574:	f000 f838 	bl	80055e8 <_malloc_usable_size_r>
 8005578:	4284      	cmp	r4, r0
 800557a:	4607      	mov	r7, r0
 800557c:	d802      	bhi.n	8005584 <_realloc_r+0x34>
 800557e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005582:	d812      	bhi.n	80055aa <_realloc_r+0x5a>
 8005584:	4621      	mov	r1, r4
 8005586:	4640      	mov	r0, r8
 8005588:	f7ff ff6e 	bl	8005468 <_malloc_r>
 800558c:	4605      	mov	r5, r0
 800558e:	2800      	cmp	r0, #0
 8005590:	d0ed      	beq.n	800556e <_realloc_r+0x1e>
 8005592:	42bc      	cmp	r4, r7
 8005594:	4622      	mov	r2, r4
 8005596:	4631      	mov	r1, r6
 8005598:	bf28      	it	cs
 800559a:	463a      	movcs	r2, r7
 800559c:	f7ff fed0 	bl	8005340 <memcpy>
 80055a0:	4631      	mov	r1, r6
 80055a2:	4640      	mov	r0, r8
 80055a4:	f7ff fef4 	bl	8005390 <_free_r>
 80055a8:	e7e1      	b.n	800556e <_realloc_r+0x1e>
 80055aa:	4635      	mov	r5, r6
 80055ac:	e7df      	b.n	800556e <_realloc_r+0x1e>
	...

080055b0 <_sbrk_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d06      	ldr	r5, [pc, #24]	; (80055cc <_sbrk_r+0x1c>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	4604      	mov	r4, r0
 80055b8:	4608      	mov	r0, r1
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	f7fb ffe8 	bl	8001590 <_sbrk>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_sbrk_r+0x1a>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_sbrk_r+0x1a>
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	200008f8 	.word	0x200008f8

080055d0 <__malloc_lock>:
 80055d0:	4801      	ldr	r0, [pc, #4]	; (80055d8 <__malloc_lock+0x8>)
 80055d2:	f000 b811 	b.w	80055f8 <__retarget_lock_acquire_recursive>
 80055d6:	bf00      	nop
 80055d8:	200008fc 	.word	0x200008fc

080055dc <__malloc_unlock>:
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <__malloc_unlock+0x8>)
 80055de:	f000 b80c 	b.w	80055fa <__retarget_lock_release_recursive>
 80055e2:	bf00      	nop
 80055e4:	200008fc 	.word	0x200008fc

080055e8 <_malloc_usable_size_r>:
 80055e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ec:	1f18      	subs	r0, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bfbc      	itt	lt
 80055f2:	580b      	ldrlt	r3, [r1, r0]
 80055f4:	18c0      	addlt	r0, r0, r3
 80055f6:	4770      	bx	lr

080055f8 <__retarget_lock_acquire_recursive>:
 80055f8:	4770      	bx	lr

080055fa <__retarget_lock_release_recursive>:
 80055fa:	4770      	bx	lr

080055fc <_init>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	bf00      	nop
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr

08005608 <_fini>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr
